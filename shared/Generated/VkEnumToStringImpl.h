// auto-generated file

	ND_ String  Serialize_VkFenceCreateFlagBits (VkFenceCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_FENCE_CREATE_SIGNALED_BIT : return "VK_FENCE_CREATE_SIGNALED_BIT";
			case VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkFormat (VkFormat value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_FORMAT_UNDEFINED : return "VK_FORMAT_UNDEFINED";
			case VK_FORMAT_R4G4_UNORM_PACK8 : return "VK_FORMAT_R4G4_UNORM_PACK8";
			case VK_FORMAT_R4G4B4A4_UNORM_PACK16 : return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
			case VK_FORMAT_B4G4R4A4_UNORM_PACK16 : return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
			case VK_FORMAT_R5G6B5_UNORM_PACK16 : return "VK_FORMAT_R5G6B5_UNORM_PACK16";
			case VK_FORMAT_B5G6R5_UNORM_PACK16 : return "VK_FORMAT_B5G6R5_UNORM_PACK16";
			case VK_FORMAT_R5G5B5A1_UNORM_PACK16 : return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
			case VK_FORMAT_B5G5R5A1_UNORM_PACK16 : return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
			case VK_FORMAT_A1R5G5B5_UNORM_PACK16 : return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
			case VK_FORMAT_R8_UNORM : return "VK_FORMAT_R8_UNORM";
			case VK_FORMAT_R8_SNORM : return "VK_FORMAT_R8_SNORM";
			case VK_FORMAT_R8_USCALED : return "VK_FORMAT_R8_USCALED";
			case VK_FORMAT_R8_SSCALED : return "VK_FORMAT_R8_SSCALED";
			case VK_FORMAT_R8_UINT : return "VK_FORMAT_R8_UINT";
			case VK_FORMAT_R8_SINT : return "VK_FORMAT_R8_SINT";
			case VK_FORMAT_R8_SRGB : return "VK_FORMAT_R8_SRGB";
			case VK_FORMAT_R8G8_UNORM : return "VK_FORMAT_R8G8_UNORM";
			case VK_FORMAT_R8G8_SNORM : return "VK_FORMAT_R8G8_SNORM";
			case VK_FORMAT_R8G8_USCALED : return "VK_FORMAT_R8G8_USCALED";
			case VK_FORMAT_R8G8_SSCALED : return "VK_FORMAT_R8G8_SSCALED";
			case VK_FORMAT_R8G8_UINT : return "VK_FORMAT_R8G8_UINT";
			case VK_FORMAT_R8G8_SINT : return "VK_FORMAT_R8G8_SINT";
			case VK_FORMAT_R8G8_SRGB : return "VK_FORMAT_R8G8_SRGB";
			case VK_FORMAT_R8G8B8_UNORM : return "VK_FORMAT_R8G8B8_UNORM";
			case VK_FORMAT_R8G8B8_SNORM : return "VK_FORMAT_R8G8B8_SNORM";
			case VK_FORMAT_R8G8B8_USCALED : return "VK_FORMAT_R8G8B8_USCALED";
			case VK_FORMAT_R8G8B8_SSCALED : return "VK_FORMAT_R8G8B8_SSCALED";
			case VK_FORMAT_R8G8B8_UINT : return "VK_FORMAT_R8G8B8_UINT";
			case VK_FORMAT_R8G8B8_SINT : return "VK_FORMAT_R8G8B8_SINT";
			case VK_FORMAT_R8G8B8_SRGB : return "VK_FORMAT_R8G8B8_SRGB";
			case VK_FORMAT_B8G8R8_UNORM : return "VK_FORMAT_B8G8R8_UNORM";
			case VK_FORMAT_B8G8R8_SNORM : return "VK_FORMAT_B8G8R8_SNORM";
			case VK_FORMAT_B8G8R8_USCALED : return "VK_FORMAT_B8G8R8_USCALED";
			case VK_FORMAT_B8G8R8_SSCALED : return "VK_FORMAT_B8G8R8_SSCALED";
			case VK_FORMAT_B8G8R8_UINT : return "VK_FORMAT_B8G8R8_UINT";
			case VK_FORMAT_B8G8R8_SINT : return "VK_FORMAT_B8G8R8_SINT";
			case VK_FORMAT_B8G8R8_SRGB : return "VK_FORMAT_B8G8R8_SRGB";
			case VK_FORMAT_R8G8B8A8_UNORM : return "VK_FORMAT_R8G8B8A8_UNORM";
			case VK_FORMAT_R8G8B8A8_SNORM : return "VK_FORMAT_R8G8B8A8_SNORM";
			case VK_FORMAT_R8G8B8A8_USCALED : return "VK_FORMAT_R8G8B8A8_USCALED";
			case VK_FORMAT_R8G8B8A8_SSCALED : return "VK_FORMAT_R8G8B8A8_SSCALED";
			case VK_FORMAT_R8G8B8A8_UINT : return "VK_FORMAT_R8G8B8A8_UINT";
			case VK_FORMAT_R8G8B8A8_SINT : return "VK_FORMAT_R8G8B8A8_SINT";
			case VK_FORMAT_R8G8B8A8_SRGB : return "VK_FORMAT_R8G8B8A8_SRGB";
			case VK_FORMAT_B8G8R8A8_UNORM : return "VK_FORMAT_B8G8R8A8_UNORM";
			case VK_FORMAT_B8G8R8A8_SNORM : return "VK_FORMAT_B8G8R8A8_SNORM";
			case VK_FORMAT_B8G8R8A8_USCALED : return "VK_FORMAT_B8G8R8A8_USCALED";
			case VK_FORMAT_B8G8R8A8_SSCALED : return "VK_FORMAT_B8G8R8A8_SSCALED";
			case VK_FORMAT_B8G8R8A8_UINT : return "VK_FORMAT_B8G8R8A8_UINT";
			case VK_FORMAT_B8G8R8A8_SINT : return "VK_FORMAT_B8G8R8A8_SINT";
			case VK_FORMAT_B8G8R8A8_SRGB : return "VK_FORMAT_B8G8R8A8_SRGB";
			case VK_FORMAT_A8B8G8R8_UNORM_PACK32 : return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
			case VK_FORMAT_A8B8G8R8_SNORM_PACK32 : return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
			case VK_FORMAT_A8B8G8R8_USCALED_PACK32 : return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
			case VK_FORMAT_A8B8G8R8_SSCALED_PACK32 : return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
			case VK_FORMAT_A8B8G8R8_UINT_PACK32 : return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
			case VK_FORMAT_A8B8G8R8_SINT_PACK32 : return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
			case VK_FORMAT_A8B8G8R8_SRGB_PACK32 : return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
			case VK_FORMAT_A2R10G10B10_UNORM_PACK32 : return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
			case VK_FORMAT_A2R10G10B10_SNORM_PACK32 : return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
			case VK_FORMAT_A2R10G10B10_USCALED_PACK32 : return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
			case VK_FORMAT_A2R10G10B10_SSCALED_PACK32 : return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
			case VK_FORMAT_A2R10G10B10_UINT_PACK32 : return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
			case VK_FORMAT_A2R10G10B10_SINT_PACK32 : return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
			case VK_FORMAT_A2B10G10R10_UNORM_PACK32 : return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
			case VK_FORMAT_A2B10G10R10_SNORM_PACK32 : return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
			case VK_FORMAT_A2B10G10R10_USCALED_PACK32 : return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
			case VK_FORMAT_A2B10G10R10_SSCALED_PACK32 : return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
			case VK_FORMAT_A2B10G10R10_UINT_PACK32 : return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
			case VK_FORMAT_A2B10G10R10_SINT_PACK32 : return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
			case VK_FORMAT_R16_UNORM : return "VK_FORMAT_R16_UNORM";
			case VK_FORMAT_R16_SNORM : return "VK_FORMAT_R16_SNORM";
			case VK_FORMAT_R16_USCALED : return "VK_FORMAT_R16_USCALED";
			case VK_FORMAT_R16_SSCALED : return "VK_FORMAT_R16_SSCALED";
			case VK_FORMAT_R16_UINT : return "VK_FORMAT_R16_UINT";
			case VK_FORMAT_R16_SINT : return "VK_FORMAT_R16_SINT";
			case VK_FORMAT_R16_SFLOAT : return "VK_FORMAT_R16_SFLOAT";
			case VK_FORMAT_R16G16_UNORM : return "VK_FORMAT_R16G16_UNORM";
			case VK_FORMAT_R16G16_SNORM : return "VK_FORMAT_R16G16_SNORM";
			case VK_FORMAT_R16G16_USCALED : return "VK_FORMAT_R16G16_USCALED";
			case VK_FORMAT_R16G16_SSCALED : return "VK_FORMAT_R16G16_SSCALED";
			case VK_FORMAT_R16G16_UINT : return "VK_FORMAT_R16G16_UINT";
			case VK_FORMAT_R16G16_SINT : return "VK_FORMAT_R16G16_SINT";
			case VK_FORMAT_R16G16_SFLOAT : return "VK_FORMAT_R16G16_SFLOAT";
			case VK_FORMAT_R16G16B16_UNORM : return "VK_FORMAT_R16G16B16_UNORM";
			case VK_FORMAT_R16G16B16_SNORM : return "VK_FORMAT_R16G16B16_SNORM";
			case VK_FORMAT_R16G16B16_USCALED : return "VK_FORMAT_R16G16B16_USCALED";
			case VK_FORMAT_R16G16B16_SSCALED : return "VK_FORMAT_R16G16B16_SSCALED";
			case VK_FORMAT_R16G16B16_UINT : return "VK_FORMAT_R16G16B16_UINT";
			case VK_FORMAT_R16G16B16_SINT : return "VK_FORMAT_R16G16B16_SINT";
			case VK_FORMAT_R16G16B16_SFLOAT : return "VK_FORMAT_R16G16B16_SFLOAT";
			case VK_FORMAT_R16G16B16A16_UNORM : return "VK_FORMAT_R16G16B16A16_UNORM";
			case VK_FORMAT_R16G16B16A16_SNORM : return "VK_FORMAT_R16G16B16A16_SNORM";
			case VK_FORMAT_R16G16B16A16_USCALED : return "VK_FORMAT_R16G16B16A16_USCALED";
			case VK_FORMAT_R16G16B16A16_SSCALED : return "VK_FORMAT_R16G16B16A16_SSCALED";
			case VK_FORMAT_R16G16B16A16_UINT : return "VK_FORMAT_R16G16B16A16_UINT";
			case VK_FORMAT_R16G16B16A16_SINT : return "VK_FORMAT_R16G16B16A16_SINT";
			case VK_FORMAT_R16G16B16A16_SFLOAT : return "VK_FORMAT_R16G16B16A16_SFLOAT";
			case VK_FORMAT_R32_UINT : return "VK_FORMAT_R32_UINT";
			case VK_FORMAT_R32_SINT : return "VK_FORMAT_R32_SINT";
			case VK_FORMAT_R32_SFLOAT : return "VK_FORMAT_R32_SFLOAT";
			case VK_FORMAT_R32G32_UINT : return "VK_FORMAT_R32G32_UINT";
			case VK_FORMAT_R32G32_SINT : return "VK_FORMAT_R32G32_SINT";
			case VK_FORMAT_R32G32_SFLOAT : return "VK_FORMAT_R32G32_SFLOAT";
			case VK_FORMAT_R32G32B32_UINT : return "VK_FORMAT_R32G32B32_UINT";
			case VK_FORMAT_R32G32B32_SINT : return "VK_FORMAT_R32G32B32_SINT";
			case VK_FORMAT_R32G32B32_SFLOAT : return "VK_FORMAT_R32G32B32_SFLOAT";
			case VK_FORMAT_R32G32B32A32_UINT : return "VK_FORMAT_R32G32B32A32_UINT";
			case VK_FORMAT_R32G32B32A32_SINT : return "VK_FORMAT_R32G32B32A32_SINT";
			case VK_FORMAT_R32G32B32A32_SFLOAT : return "VK_FORMAT_R32G32B32A32_SFLOAT";
			case VK_FORMAT_R64_UINT : return "VK_FORMAT_R64_UINT";
			case VK_FORMAT_R64_SINT : return "VK_FORMAT_R64_SINT";
			case VK_FORMAT_R64_SFLOAT : return "VK_FORMAT_R64_SFLOAT";
			case VK_FORMAT_R64G64_UINT : return "VK_FORMAT_R64G64_UINT";
			case VK_FORMAT_R64G64_SINT : return "VK_FORMAT_R64G64_SINT";
			case VK_FORMAT_R64G64_SFLOAT : return "VK_FORMAT_R64G64_SFLOAT";
			case VK_FORMAT_R64G64B64_UINT : return "VK_FORMAT_R64G64B64_UINT";
			case VK_FORMAT_R64G64B64_SINT : return "VK_FORMAT_R64G64B64_SINT";
			case VK_FORMAT_R64G64B64_SFLOAT : return "VK_FORMAT_R64G64B64_SFLOAT";
			case VK_FORMAT_R64G64B64A64_UINT : return "VK_FORMAT_R64G64B64A64_UINT";
			case VK_FORMAT_R64G64B64A64_SINT : return "VK_FORMAT_R64G64B64A64_SINT";
			case VK_FORMAT_R64G64B64A64_SFLOAT : return "VK_FORMAT_R64G64B64A64_SFLOAT";
			case VK_FORMAT_B10G11R11_UFLOAT_PACK32 : return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
			case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 : return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
			case VK_FORMAT_D16_UNORM : return "VK_FORMAT_D16_UNORM";
			case VK_FORMAT_X8_D24_UNORM_PACK32 : return "VK_FORMAT_X8_D24_UNORM_PACK32";
			case VK_FORMAT_D32_SFLOAT : return "VK_FORMAT_D32_SFLOAT";
			case VK_FORMAT_S8_UINT : return "VK_FORMAT_S8_UINT";
			case VK_FORMAT_D16_UNORM_S8_UINT : return "VK_FORMAT_D16_UNORM_S8_UINT";
			case VK_FORMAT_D24_UNORM_S8_UINT : return "VK_FORMAT_D24_UNORM_S8_UINT";
			case VK_FORMAT_D32_SFLOAT_S8_UINT : return "VK_FORMAT_D32_SFLOAT_S8_UINT";
			case VK_FORMAT_BC1_RGB_UNORM_BLOCK : return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
			case VK_FORMAT_BC1_RGB_SRGB_BLOCK : return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
			case VK_FORMAT_BC1_RGBA_UNORM_BLOCK : return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
			case VK_FORMAT_BC1_RGBA_SRGB_BLOCK : return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
			case VK_FORMAT_BC2_UNORM_BLOCK : return "VK_FORMAT_BC2_UNORM_BLOCK";
			case VK_FORMAT_BC2_SRGB_BLOCK : return "VK_FORMAT_BC2_SRGB_BLOCK";
			case VK_FORMAT_BC3_UNORM_BLOCK : return "VK_FORMAT_BC3_UNORM_BLOCK";
			case VK_FORMAT_BC3_SRGB_BLOCK : return "VK_FORMAT_BC3_SRGB_BLOCK";
			case VK_FORMAT_BC4_UNORM_BLOCK : return "VK_FORMAT_BC4_UNORM_BLOCK";
			case VK_FORMAT_BC4_SNORM_BLOCK : return "VK_FORMAT_BC4_SNORM_BLOCK";
			case VK_FORMAT_BC5_UNORM_BLOCK : return "VK_FORMAT_BC5_UNORM_BLOCK";
			case VK_FORMAT_BC5_SNORM_BLOCK : return "VK_FORMAT_BC5_SNORM_BLOCK";
			case VK_FORMAT_BC6H_UFLOAT_BLOCK : return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
			case VK_FORMAT_BC6H_SFLOAT_BLOCK : return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
			case VK_FORMAT_BC7_UNORM_BLOCK : return "VK_FORMAT_BC7_UNORM_BLOCK";
			case VK_FORMAT_BC7_SRGB_BLOCK : return "VK_FORMAT_BC7_SRGB_BLOCK";
			case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK : return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
			case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK : return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
			case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK : return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
			case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK : return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
			case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK : return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
			case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK : return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
			case VK_FORMAT_EAC_R11_UNORM_BLOCK : return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
			case VK_FORMAT_EAC_R11_SNORM_BLOCK : return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
			case VK_FORMAT_EAC_R11G11_UNORM_BLOCK : return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
			case VK_FORMAT_EAC_R11G11_SNORM_BLOCK : return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
			case VK_FORMAT_ASTC_4x4_UNORM_BLOCK : return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
			case VK_FORMAT_ASTC_4x4_SRGB_BLOCK : return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
			case VK_FORMAT_ASTC_5x4_UNORM_BLOCK : return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
			case VK_FORMAT_ASTC_5x4_SRGB_BLOCK : return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
			case VK_FORMAT_ASTC_5x5_UNORM_BLOCK : return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
			case VK_FORMAT_ASTC_5x5_SRGB_BLOCK : return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
			case VK_FORMAT_ASTC_6x5_UNORM_BLOCK : return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
			case VK_FORMAT_ASTC_6x5_SRGB_BLOCK : return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
			case VK_FORMAT_ASTC_6x6_UNORM_BLOCK : return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
			case VK_FORMAT_ASTC_6x6_SRGB_BLOCK : return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
			case VK_FORMAT_ASTC_8x5_UNORM_BLOCK : return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
			case VK_FORMAT_ASTC_8x5_SRGB_BLOCK : return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
			case VK_FORMAT_ASTC_8x6_UNORM_BLOCK : return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
			case VK_FORMAT_ASTC_8x6_SRGB_BLOCK : return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
			case VK_FORMAT_ASTC_8x8_UNORM_BLOCK : return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
			case VK_FORMAT_ASTC_8x8_SRGB_BLOCK : return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
			case VK_FORMAT_ASTC_10x5_UNORM_BLOCK : return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
			case VK_FORMAT_ASTC_10x5_SRGB_BLOCK : return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
			case VK_FORMAT_ASTC_10x6_UNORM_BLOCK : return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
			case VK_FORMAT_ASTC_10x6_SRGB_BLOCK : return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
			case VK_FORMAT_ASTC_10x8_UNORM_BLOCK : return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
			case VK_FORMAT_ASTC_10x8_SRGB_BLOCK : return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
			case VK_FORMAT_ASTC_10x10_UNORM_BLOCK : return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
			case VK_FORMAT_ASTC_10x10_SRGB_BLOCK : return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
			case VK_FORMAT_ASTC_12x10_UNORM_BLOCK : return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
			case VK_FORMAT_ASTC_12x10_SRGB_BLOCK : return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
			case VK_FORMAT_ASTC_12x12_UNORM_BLOCK : return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
			case VK_FORMAT_ASTC_12x12_SRGB_BLOCK : return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
			case VK_FORMAT_G8B8G8R8_422_UNORM : return "VK_FORMAT_G8B8G8R8_422_UNORM";
			case VK_FORMAT_B8G8R8G8_422_UNORM : return "VK_FORMAT_B8G8R8G8_422_UNORM";
			case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM : return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM";
			case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM : return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM";
			case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM : return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM";
			case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM : return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM";
			case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM : return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM";
			case VK_FORMAT_R10X6_UNORM_PACK16 : return "VK_FORMAT_R10X6_UNORM_PACK16";
			case VK_FORMAT_R10X6G10X6_UNORM_2PACK16 : return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16";
			case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 : return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16";
			case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 : return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16";
			case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 : return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16";
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 : return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16";
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 : return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16";
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 : return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16";
			case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 : return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16";
			case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 : return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16";
			case VK_FORMAT_R12X4_UNORM_PACK16 : return "VK_FORMAT_R12X4_UNORM_PACK16";
			case VK_FORMAT_R12X4G12X4_UNORM_2PACK16 : return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16";
			case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 : return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16";
			case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 : return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16";
			case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 : return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16";
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 : return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16";
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 : return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16";
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 : return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16";
			case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 : return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16";
			case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 : return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16";
			case VK_FORMAT_G16B16G16R16_422_UNORM : return "VK_FORMAT_G16B16G16R16_422_UNORM";
			case VK_FORMAT_B16G16R16G16_422_UNORM : return "VK_FORMAT_B16G16R16G16_422_UNORM";
			case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM : return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM";
			case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM : return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM";
			case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM : return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM";
			case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM : return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM";
			case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM : return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM";
			case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG : return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
			case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG : return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
			case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG : return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
			case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG : return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
			case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG : return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
			case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG : return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
			case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG : return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
			case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG : return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
			case VK_FORMAT_RANGE_SIZE : break;
			case VK_FORMAT_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkBufferUsageFlagBits (VkBufferUsageFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_BUFFER_USAGE_TRANSFER_SRC_BIT : return "VK_BUFFER_USAGE_TRANSFER_SRC_BIT";
			case VK_BUFFER_USAGE_TRANSFER_DST_BIT : return "VK_BUFFER_USAGE_TRANSFER_DST_BIT";
			case VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT : return "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT";
			case VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT : return "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT";
			case VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT : return "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT";
			case VK_BUFFER_USAGE_STORAGE_BUFFER_BIT : return "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT";
			case VK_BUFFER_USAGE_INDEX_BUFFER_BIT : return "VK_BUFFER_USAGE_INDEX_BUFFER_BIT";
			case VK_BUFFER_USAGE_VERTEX_BUFFER_BIT : return "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT";
			case VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT : return "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT";
			case VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT : return "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT";
			case VK_BUFFER_USAGE_RAYTRACING_BIT_NVX : return "VK_BUFFER_USAGE_RAYTRACING_BIT_NVX";
			case VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageAspectFlagBits (VkImageAspectFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_ASPECT_COLOR_BIT : return "VK_IMAGE_ASPECT_COLOR_BIT";
			case VK_IMAGE_ASPECT_DEPTH_BIT : return "VK_IMAGE_ASPECT_DEPTH_BIT";
			case VK_IMAGE_ASPECT_STENCIL_BIT : return "VK_IMAGE_ASPECT_STENCIL_BIT";
			case VK_IMAGE_ASPECT_METADATA_BIT : return "VK_IMAGE_ASPECT_METADATA_BIT";
			case VK_IMAGE_ASPECT_PLANE_0_BIT : return "VK_IMAGE_ASPECT_PLANE_0_BIT";
			case VK_IMAGE_ASPECT_PLANE_1_BIT : return "VK_IMAGE_ASPECT_PLANE_1_BIT";
			case VK_IMAGE_ASPECT_PLANE_2_BIT : return "VK_IMAGE_ASPECT_PLANE_2_BIT";
			case VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCommandBufferLevel (VkCommandBufferLevel value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMMAND_BUFFER_LEVEL_PRIMARY : return "VK_COMMAND_BUFFER_LEVEL_PRIMARY";
			case VK_COMMAND_BUFFER_LEVEL_SECONDARY : return "VK_COMMAND_BUFFER_LEVEL_SECONDARY";
			case VK_COMMAND_BUFFER_LEVEL_RANGE_SIZE : break;
			case VK_COMMAND_BUFFER_LEVEL_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDeviceQueueCreateFlagBits (VkDeviceQueueCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT : return "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT";
			case VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkObjectType (VkObjectType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_OBJECT_TYPE_UNKNOWN : return "VK_OBJECT_TYPE_UNKNOWN";
			case VK_OBJECT_TYPE_INSTANCE : return "VK_OBJECT_TYPE_INSTANCE";
			case VK_OBJECT_TYPE_PHYSICAL_DEVICE : return "VK_OBJECT_TYPE_PHYSICAL_DEVICE";
			case VK_OBJECT_TYPE_DEVICE : return "VK_OBJECT_TYPE_DEVICE";
			case VK_OBJECT_TYPE_QUEUE : return "VK_OBJECT_TYPE_QUEUE";
			case VK_OBJECT_TYPE_SEMAPHORE : return "VK_OBJECT_TYPE_SEMAPHORE";
			case VK_OBJECT_TYPE_COMMAND_BUFFER : return "VK_OBJECT_TYPE_COMMAND_BUFFER";
			case VK_OBJECT_TYPE_FENCE : return "VK_OBJECT_TYPE_FENCE";
			case VK_OBJECT_TYPE_DEVICE_MEMORY : return "VK_OBJECT_TYPE_DEVICE_MEMORY";
			case VK_OBJECT_TYPE_BUFFER : return "VK_OBJECT_TYPE_BUFFER";
			case VK_OBJECT_TYPE_IMAGE : return "VK_OBJECT_TYPE_IMAGE";
			case VK_OBJECT_TYPE_EVENT : return "VK_OBJECT_TYPE_EVENT";
			case VK_OBJECT_TYPE_QUERY_POOL : return "VK_OBJECT_TYPE_QUERY_POOL";
			case VK_OBJECT_TYPE_BUFFER_VIEW : return "VK_OBJECT_TYPE_BUFFER_VIEW";
			case VK_OBJECT_TYPE_IMAGE_VIEW : return "VK_OBJECT_TYPE_IMAGE_VIEW";
			case VK_OBJECT_TYPE_SHADER_MODULE : return "VK_OBJECT_TYPE_SHADER_MODULE";
			case VK_OBJECT_TYPE_PIPELINE_CACHE : return "VK_OBJECT_TYPE_PIPELINE_CACHE";
			case VK_OBJECT_TYPE_PIPELINE_LAYOUT : return "VK_OBJECT_TYPE_PIPELINE_LAYOUT";
			case VK_OBJECT_TYPE_RENDER_PASS : return "VK_OBJECT_TYPE_RENDER_PASS";
			case VK_OBJECT_TYPE_PIPELINE : return "VK_OBJECT_TYPE_PIPELINE";
			case VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT : return "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT";
			case VK_OBJECT_TYPE_SAMPLER : return "VK_OBJECT_TYPE_SAMPLER";
			case VK_OBJECT_TYPE_DESCRIPTOR_POOL : return "VK_OBJECT_TYPE_DESCRIPTOR_POOL";
			case VK_OBJECT_TYPE_DESCRIPTOR_SET : return "VK_OBJECT_TYPE_DESCRIPTOR_SET";
			case VK_OBJECT_TYPE_FRAMEBUFFER : return "VK_OBJECT_TYPE_FRAMEBUFFER";
			case VK_OBJECT_TYPE_COMMAND_POOL : return "VK_OBJECT_TYPE_COMMAND_POOL";
			case VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION : return "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION";
			case VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE : return "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE";
			case VK_OBJECT_TYPE_SURFACE_KHR : return "VK_OBJECT_TYPE_SURFACE_KHR";
			case VK_OBJECT_TYPE_SWAPCHAIN_KHR : return "VK_OBJECT_TYPE_SWAPCHAIN_KHR";
			case VK_OBJECT_TYPE_DISPLAY_KHR : return "VK_OBJECT_TYPE_DISPLAY_KHR";
			case VK_OBJECT_TYPE_DISPLAY_MODE_KHR : return "VK_OBJECT_TYPE_DISPLAY_MODE_KHR";
			case VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT : return "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT";
			case VK_OBJECT_TYPE_OBJECT_TABLE_NVX : return "VK_OBJECT_TYPE_OBJECT_TABLE_NVX";
			case VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX : return "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX";
			case VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT : return "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT";
			case VK_OBJECT_TYPE_VALIDATION_CACHE_EXT : return "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT";
			case VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NVX : return "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NVX";
			case VK_OBJECT_TYPE_RANGE_SIZE : break;
			case VK_OBJECT_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSharingMode (VkSharingMode value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SHARING_MODE_EXCLUSIVE : return "VK_SHARING_MODE_EXCLUSIVE";
			case VK_SHARING_MODE_CONCURRENT : return "VK_SHARING_MODE_CONCURRENT";
			case VK_SHARING_MODE_RANGE_SIZE : break;
			case VK_SHARING_MODE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDescriptorPoolCreateFlagBits (VkDescriptorPoolCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT : return "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT";
			case VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT : return "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT";
			case VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkStructureType (VkStructureType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_STRUCTURE_TYPE_APPLICATION_INFO : return "VK_STRUCTURE_TYPE_APPLICATION_INFO";
			case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO : return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO : return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO : return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_SUBMIT_INFO : return "VK_STRUCTURE_TYPE_SUBMIT_INFO";
			case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO : return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO";
			case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE : return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE";
			case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO : return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO";
			case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO : return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO : return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO : return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO";
			case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO : return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO";
			case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO : return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO";
			case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO : return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO";
			case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO : return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO";
			case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO : return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO : return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO : return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO";
			case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO : return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO : return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO";
			case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET : return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET";
			case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET : return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET";
			case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO : return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO";
			case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO : return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO";
			case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO : return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO";
			case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO";
			case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO";
			case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO";
			case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO : return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO";
			case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER : return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER";
			case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER : return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER";
			case VK_STRUCTURE_TYPE_MEMORY_BARRIER : return "VK_STRUCTURE_TYPE_MEMORY_BARRIER";
			case VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO : return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO : return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES";
			case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO : return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO";
			case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO : return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES";
			case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS : return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS";
			case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO : return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO";
			case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO : return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO";
			case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO : return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO";
			case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO : return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 : return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2";
			case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 : return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2";
			case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 : return "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2";
			case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 : return "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2";
			case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 : return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2";
			case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 : return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2";
			case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 : return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2";
			case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 : return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2";
			case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 : return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES";
			case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO : return "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO";
			case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO : return "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES";
			case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO : return "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES";
			case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 : return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2";
			case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO : return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO";
			case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO : return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO";
			case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO : return "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO";
			case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO : return "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES";
			case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES : return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO : return "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO";
			case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES : return "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO";
			case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES : return "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES";
			case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO : return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO";
			case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO : return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO";
			case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES : return "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES";
			case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO : return "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO : return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO";
			case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES : return "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES";
			case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR : return "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR";
			case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR : return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR";
			case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR : return "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR";
			case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR";
			case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD";
			case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT";
			case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT";
			case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT";
			case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV : return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV";
			case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD : return "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV";
			case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV";
			case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV";
			case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV";
			case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV : return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV";
			case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT : return "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT";
			case VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN : return "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN";
			case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT";
			case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR : return "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR";
			case VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR";
			case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR : return "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR";
			case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR : return "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR";
			case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR : return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR";
			case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR : return "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR";
			case VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR : return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR";
			case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR : return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR";
			case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT";
			case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT : return "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT";
			case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR : return "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR";
			case VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX : return "VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX";
			case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX : return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX";
			case VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX : return "VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX";
			case VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX : return "VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX";
			case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX : return "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX";
			case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX : return "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX";
			case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT : return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT";
			case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT : return "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT";
			case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT : return "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT";
			case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT : return "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT";
			case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE : return "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX";
			case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_HDR_METADATA_EXT : return "VK_STRUCTURE_TYPE_HDR_METADATA_EXT";
			case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR : return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR";
			case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR : return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR";
			case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR : return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR";
			case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR : return "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR";
			case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR : return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR";
			case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR : return "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR";
			case VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR : return "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR";
			case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR : return "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR";
			case VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR : return "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR";
			case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR : return "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR";
			case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR : return "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR";
			case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR : return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR";
			case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR : return "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR";
			case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR : return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR";
			case VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK : return "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK";
			case VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK : return "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK";
			case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT";
			case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT";
			case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT";
			case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT";
			case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID : return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID";
			case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID : return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID";
			case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID : return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID";
			case VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID : return "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID";
			case VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID : return "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID";
			case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID : return "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT : return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT : return "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT";
			case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT : return "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR : return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV";
			case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_RAYTRACING_PIPELINE_CREATE_INFO_NVX : return "VK_STRUCTURE_TYPE_RAYTRACING_PIPELINE_CREATE_INFO_NVX";
			case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX : return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NVX";
			case VK_STRUCTURE_TYPE_GEOMETRY_INSTANCE_NVX : return "VK_STRUCTURE_TYPE_GEOMETRY_INSTANCE_NVX";
			case VK_STRUCTURE_TYPE_GEOMETRY_NVX : return "VK_STRUCTURE_TYPE_GEOMETRY_NVX";
			case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NVX : return "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NVX";
			case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NVX : return "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NVX";
			case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NVX : return "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NVX";
			case VK_STRUCTURE_TYPE_DESCRIPTOR_ACCELERATION_STRUCTURE_INFO_NVX : return "VK_STRUCTURE_TYPE_DESCRIPTOR_ACCELERATION_STRUCTURE_INFO_NVX";
			case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX : return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NVX";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAYTRACING_PROPERTIES_NVX : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAYTRACING_PROPERTIES_NVX";
			case VK_STRUCTURE_TYPE_HIT_SHADER_MODULE_CREATE_INFO_NVX : return "VK_STRUCTURE_TYPE_HIT_SHADER_MODULE_CREATE_INFO_NVX";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV";
			case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR";
			case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT";
			case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT";
			case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT : return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV";
			case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV";
			case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV : return "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV";
			case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV : return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV";
			case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR";
			case VK_STRUCTURE_TYPE_RANGE_SIZE : break;
			case VK_STRUCTURE_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkQueueFlagBits (VkQueueFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_QUEUE_GRAPHICS_BIT : return "VK_QUEUE_GRAPHICS_BIT";
			case VK_QUEUE_COMPUTE_BIT : return "VK_QUEUE_COMPUTE_BIT";
			case VK_QUEUE_TRANSFER_BIT : return "VK_QUEUE_TRANSFER_BIT";
			case VK_QUEUE_SPARSE_BINDING_BIT : return "VK_QUEUE_SPARSE_BINDING_BIT";
			case VK_QUEUE_PROTECTED_BIT : return "VK_QUEUE_PROTECTED_BIT";
			case VK_QUEUE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkChromaLocation (VkChromaLocation value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_CHROMA_LOCATION_COSITED_EVEN : return "VK_CHROMA_LOCATION_COSITED_EVEN";
			case VK_CHROMA_LOCATION_MIDPOINT : return "VK_CHROMA_LOCATION_MIDPOINT";
			case VK_CHROMA_LOCATION_RANGE_SIZE : break;
			case VK_CHROMA_LOCATION_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkResult (VkResult value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SUCCESS : return "VK_SUCCESS";
			case VK_NOT_READY : return "VK_NOT_READY";
			case VK_TIMEOUT : return "VK_TIMEOUT";
			case VK_EVENT_SET : return "VK_EVENT_SET";
			case VK_EVENT_RESET : return "VK_EVENT_RESET";
			case VK_INCOMPLETE : return "VK_INCOMPLETE";
			case VK_ERROR_OUT_OF_HOST_MEMORY : return "VK_ERROR_OUT_OF_HOST_MEMORY";
			case VK_ERROR_OUT_OF_DEVICE_MEMORY : return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
			case VK_ERROR_INITIALIZATION_FAILED : return "VK_ERROR_INITIALIZATION_FAILED";
			case VK_ERROR_DEVICE_LOST : return "VK_ERROR_DEVICE_LOST";
			case VK_ERROR_MEMORY_MAP_FAILED : return "VK_ERROR_MEMORY_MAP_FAILED";
			case VK_ERROR_LAYER_NOT_PRESENT : return "VK_ERROR_LAYER_NOT_PRESENT";
			case VK_ERROR_EXTENSION_NOT_PRESENT : return "VK_ERROR_EXTENSION_NOT_PRESENT";
			case VK_ERROR_FEATURE_NOT_PRESENT : return "VK_ERROR_FEATURE_NOT_PRESENT";
			case VK_ERROR_INCOMPATIBLE_DRIVER : return "VK_ERROR_INCOMPATIBLE_DRIVER";
			case VK_ERROR_TOO_MANY_OBJECTS : return "VK_ERROR_TOO_MANY_OBJECTS";
			case VK_ERROR_FORMAT_NOT_SUPPORTED : return "VK_ERROR_FORMAT_NOT_SUPPORTED";
			case VK_ERROR_FRAGMENTED_POOL : return "VK_ERROR_FRAGMENTED_POOL";
			case VK_ERROR_OUT_OF_POOL_MEMORY : return "VK_ERROR_OUT_OF_POOL_MEMORY";
			case VK_ERROR_INVALID_EXTERNAL_HANDLE : return "VK_ERROR_INVALID_EXTERNAL_HANDLE";
			case VK_ERROR_SURFACE_LOST_KHR : return "VK_ERROR_SURFACE_LOST_KHR";
			case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR : return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
			case VK_SUBOPTIMAL_KHR : return "VK_SUBOPTIMAL_KHR";
			case VK_ERROR_OUT_OF_DATE_KHR : return "VK_ERROR_OUT_OF_DATE_KHR";
			case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR : return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
			case VK_ERROR_VALIDATION_FAILED_EXT : return "VK_ERROR_VALIDATION_FAILED_EXT";
			case VK_ERROR_INVALID_SHADER_NV : return "VK_ERROR_INVALID_SHADER_NV";
			case VK_ERROR_FRAGMENTATION_EXT : return "VK_ERROR_FRAGMENTATION_EXT";
			case VK_ERROR_NOT_PERMITTED_EXT : return "VK_ERROR_NOT_PERMITTED_EXT";
			case VK_RESULT_RANGE_SIZE : break;
			case VK_RESULT_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSemaphoreImportFlagBits (VkSemaphoreImportFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SEMAPHORE_IMPORT_TEMPORARY_BIT : return "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT";
			case VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDescriptorType (VkDescriptorType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DESCRIPTOR_TYPE_SAMPLER : return "VK_DESCRIPTOR_TYPE_SAMPLER";
			case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER : return "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER";
			case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE : return "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE";
			case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE : return "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE";
			case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER : return "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER";
			case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER : return "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER";
			case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER : return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER";
			case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER : return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER";
			case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC : return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC";
			case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC : return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC";
			case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT : return "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT";
			case VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT : return "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT";
			case VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NVX : return "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NVX";
			case VK_DESCRIPTOR_TYPE_RANGE_SIZE : break;
			case VK_DESCRIPTOR_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageType (VkImageType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_TYPE_1D : return "VK_IMAGE_TYPE_1D";
			case VK_IMAGE_TYPE_2D : return "VK_IMAGE_TYPE_2D";
			case VK_IMAGE_TYPE_3D : return "VK_IMAGE_TYPE_3D";
			case VK_IMAGE_TYPE_RANGE_SIZE : break;
			case VK_IMAGE_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkFrontFace (VkFrontFace value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_FRONT_FACE_COUNTER_CLOCKWISE : return "VK_FRONT_FACE_COUNTER_CLOCKWISE";
			case VK_FRONT_FACE_CLOCKWISE : return "VK_FRONT_FACE_CLOCKWISE";
			case VK_FRONT_FACE_RANGE_SIZE : break;
			case VK_FRONT_FACE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkQueryPipelineStatisticFlagBits (VkQueryPipelineStatisticFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT : return "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT : return "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT : return "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT : return "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT : return "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT : return "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT : return "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT : return "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT : return "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT : return "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT : return "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT";
			case VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPipelineStageFlagBits (VkPipelineStageFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT : return "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT";
			case VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT : return "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT";
			case VK_PIPELINE_STAGE_VERTEX_INPUT_BIT : return "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT";
			case VK_PIPELINE_STAGE_VERTEX_SHADER_BIT : return "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT";
			case VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT : return "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT";
			case VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT : return "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT";
			case VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT : return "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT";
			case VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT : return "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT";
			case VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT : return "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT";
			case VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT : return "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT";
			case VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT : return "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT";
			case VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT : return "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT";
			case VK_PIPELINE_STAGE_TRANSFER_BIT : return "VK_PIPELINE_STAGE_TRANSFER_BIT";
			case VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT : return "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT";
			case VK_PIPELINE_STAGE_HOST_BIT : return "VK_PIPELINE_STAGE_HOST_BIT";
			case VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT : return "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT";
			case VK_PIPELINE_STAGE_ALL_COMMANDS_BIT : return "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT";
			case VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT : return "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT";
			case VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX : return "VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX";
			case VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV : return "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV";
			case VK_PIPELINE_STAGE_RAYTRACING_BIT_NVX : return "VK_PIPELINE_STAGE_RAYTRACING_BIT_NVX";
			case VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV : return "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV";
			case VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV : return "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV";
			case VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageTiling (VkImageTiling value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_TILING_OPTIMAL : return "VK_IMAGE_TILING_OPTIMAL";
			case VK_IMAGE_TILING_LINEAR : return "VK_IMAGE_TILING_LINEAR";
			case VK_IMAGE_TILING_RANGE_SIZE : break;
			case VK_IMAGE_TILING_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPhysicalDeviceType (VkPhysicalDeviceType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_PHYSICAL_DEVICE_TYPE_OTHER : return "VK_PHYSICAL_DEVICE_TYPE_OTHER";
			case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU : return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU";
			case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU : return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU";
			case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU : return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU";
			case VK_PHYSICAL_DEVICE_TYPE_CPU : return "VK_PHYSICAL_DEVICE_TYPE_CPU";
			case VK_PHYSICAL_DEVICE_TYPE_RANGE_SIZE : break;
			case VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkAccessFlagBits (VkAccessFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_ACCESS_INDIRECT_COMMAND_READ_BIT : return "VK_ACCESS_INDIRECT_COMMAND_READ_BIT";
			case VK_ACCESS_INDEX_READ_BIT : return "VK_ACCESS_INDEX_READ_BIT";
			case VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT : return "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT";
			case VK_ACCESS_UNIFORM_READ_BIT : return "VK_ACCESS_UNIFORM_READ_BIT";
			case VK_ACCESS_INPUT_ATTACHMENT_READ_BIT : return "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT";
			case VK_ACCESS_SHADER_READ_BIT : return "VK_ACCESS_SHADER_READ_BIT";
			case VK_ACCESS_SHADER_WRITE_BIT : return "VK_ACCESS_SHADER_WRITE_BIT";
			case VK_ACCESS_COLOR_ATTACHMENT_READ_BIT : return "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT";
			case VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT : return "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT";
			case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT : return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT";
			case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT : return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT";
			case VK_ACCESS_TRANSFER_READ_BIT : return "VK_ACCESS_TRANSFER_READ_BIT";
			case VK_ACCESS_TRANSFER_WRITE_BIT : return "VK_ACCESS_TRANSFER_WRITE_BIT";
			case VK_ACCESS_HOST_READ_BIT : return "VK_ACCESS_HOST_READ_BIT";
			case VK_ACCESS_HOST_WRITE_BIT : return "VK_ACCESS_HOST_WRITE_BIT";
			case VK_ACCESS_MEMORY_READ_BIT : return "VK_ACCESS_MEMORY_READ_BIT";
			case VK_ACCESS_MEMORY_WRITE_BIT : return "VK_ACCESS_MEMORY_WRITE_BIT";
			case VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT : return "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT";
			case VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX : return "VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX";
			case VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX : return "VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX";
			case VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT : return "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT";
			case VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV : return "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV";
			case VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NVX : return "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NVX";
			case VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NVX : return "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NVX";
			case VK_ACCESS_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkIndexType (VkIndexType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_INDEX_TYPE_UINT16 : return "VK_INDEX_TYPE_UINT16";
			case VK_INDEX_TYPE_UINT32 : return "VK_INDEX_TYPE_UINT32";
			case VK_INDEX_TYPE_RANGE_SIZE : break;
			case VK_INDEX_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkBlendOp (VkBlendOp value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_BLEND_OP_ADD : return "VK_BLEND_OP_ADD";
			case VK_BLEND_OP_SUBTRACT : return "VK_BLEND_OP_SUBTRACT";
			case VK_BLEND_OP_REVERSE_SUBTRACT : return "VK_BLEND_OP_REVERSE_SUBTRACT";
			case VK_BLEND_OP_MIN : return "VK_BLEND_OP_MIN";
			case VK_BLEND_OP_MAX : return "VK_BLEND_OP_MAX";
			case VK_BLEND_OP_ZERO_EXT : return "VK_BLEND_OP_ZERO_EXT";
			case VK_BLEND_OP_SRC_EXT : return "VK_BLEND_OP_SRC_EXT";
			case VK_BLEND_OP_DST_EXT : return "VK_BLEND_OP_DST_EXT";
			case VK_BLEND_OP_SRC_OVER_EXT : return "VK_BLEND_OP_SRC_OVER_EXT";
			case VK_BLEND_OP_DST_OVER_EXT : return "VK_BLEND_OP_DST_OVER_EXT";
			case VK_BLEND_OP_SRC_IN_EXT : return "VK_BLEND_OP_SRC_IN_EXT";
			case VK_BLEND_OP_DST_IN_EXT : return "VK_BLEND_OP_DST_IN_EXT";
			case VK_BLEND_OP_SRC_OUT_EXT : return "VK_BLEND_OP_SRC_OUT_EXT";
			case VK_BLEND_OP_DST_OUT_EXT : return "VK_BLEND_OP_DST_OUT_EXT";
			case VK_BLEND_OP_SRC_ATOP_EXT : return "VK_BLEND_OP_SRC_ATOP_EXT";
			case VK_BLEND_OP_DST_ATOP_EXT : return "VK_BLEND_OP_DST_ATOP_EXT";
			case VK_BLEND_OP_XOR_EXT : return "VK_BLEND_OP_XOR_EXT";
			case VK_BLEND_OP_MULTIPLY_EXT : return "VK_BLEND_OP_MULTIPLY_EXT";
			case VK_BLEND_OP_SCREEN_EXT : return "VK_BLEND_OP_SCREEN_EXT";
			case VK_BLEND_OP_OVERLAY_EXT : return "VK_BLEND_OP_OVERLAY_EXT";
			case VK_BLEND_OP_DARKEN_EXT : return "VK_BLEND_OP_DARKEN_EXT";
			case VK_BLEND_OP_LIGHTEN_EXT : return "VK_BLEND_OP_LIGHTEN_EXT";
			case VK_BLEND_OP_COLORDODGE_EXT : return "VK_BLEND_OP_COLORDODGE_EXT";
			case VK_BLEND_OP_COLORBURN_EXT : return "VK_BLEND_OP_COLORBURN_EXT";
			case VK_BLEND_OP_HARDLIGHT_EXT : return "VK_BLEND_OP_HARDLIGHT_EXT";
			case VK_BLEND_OP_SOFTLIGHT_EXT : return "VK_BLEND_OP_SOFTLIGHT_EXT";
			case VK_BLEND_OP_DIFFERENCE_EXT : return "VK_BLEND_OP_DIFFERENCE_EXT";
			case VK_BLEND_OP_EXCLUSION_EXT : return "VK_BLEND_OP_EXCLUSION_EXT";
			case VK_BLEND_OP_INVERT_EXT : return "VK_BLEND_OP_INVERT_EXT";
			case VK_BLEND_OP_INVERT_RGB_EXT : return "VK_BLEND_OP_INVERT_RGB_EXT";
			case VK_BLEND_OP_LINEARDODGE_EXT : return "VK_BLEND_OP_LINEARDODGE_EXT";
			case VK_BLEND_OP_LINEARBURN_EXT : return "VK_BLEND_OP_LINEARBURN_EXT";
			case VK_BLEND_OP_VIVIDLIGHT_EXT : return "VK_BLEND_OP_VIVIDLIGHT_EXT";
			case VK_BLEND_OP_LINEARLIGHT_EXT : return "VK_BLEND_OP_LINEARLIGHT_EXT";
			case VK_BLEND_OP_PINLIGHT_EXT : return "VK_BLEND_OP_PINLIGHT_EXT";
			case VK_BLEND_OP_HARDMIX_EXT : return "VK_BLEND_OP_HARDMIX_EXT";
			case VK_BLEND_OP_HSL_HUE_EXT : return "VK_BLEND_OP_HSL_HUE_EXT";
			case VK_BLEND_OP_HSL_SATURATION_EXT : return "VK_BLEND_OP_HSL_SATURATION_EXT";
			case VK_BLEND_OP_HSL_COLOR_EXT : return "VK_BLEND_OP_HSL_COLOR_EXT";
			case VK_BLEND_OP_HSL_LUMINOSITY_EXT : return "VK_BLEND_OP_HSL_LUMINOSITY_EXT";
			case VK_BLEND_OP_PLUS_EXT : return "VK_BLEND_OP_PLUS_EXT";
			case VK_BLEND_OP_PLUS_CLAMPED_EXT : return "VK_BLEND_OP_PLUS_CLAMPED_EXT";
			case VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT : return "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT";
			case VK_BLEND_OP_PLUS_DARKER_EXT : return "VK_BLEND_OP_PLUS_DARKER_EXT";
			case VK_BLEND_OP_MINUS_EXT : return "VK_BLEND_OP_MINUS_EXT";
			case VK_BLEND_OP_MINUS_CLAMPED_EXT : return "VK_BLEND_OP_MINUS_CLAMPED_EXT";
			case VK_BLEND_OP_CONTRAST_EXT : return "VK_BLEND_OP_CONTRAST_EXT";
			case VK_BLEND_OP_INVERT_OVG_EXT : return "VK_BLEND_OP_INVERT_OVG_EXT";
			case VK_BLEND_OP_RED_EXT : return "VK_BLEND_OP_RED_EXT";
			case VK_BLEND_OP_GREEN_EXT : return "VK_BLEND_OP_GREEN_EXT";
			case VK_BLEND_OP_BLUE_EXT : return "VK_BLEND_OP_BLUE_EXT";
			case VK_BLEND_OP_RANGE_SIZE : break;
			case VK_BLEND_OP_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkQueryType (VkQueryType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_QUERY_TYPE_OCCLUSION : return "VK_QUERY_TYPE_OCCLUSION";
			case VK_QUERY_TYPE_PIPELINE_STATISTICS : return "VK_QUERY_TYPE_PIPELINE_STATISTICS";
			case VK_QUERY_TYPE_TIMESTAMP : return "VK_QUERY_TYPE_TIMESTAMP";
			case VK_QUERY_TYPE_COMPACTED_SIZE_NVX : return "VK_QUERY_TYPE_COMPACTED_SIZE_NVX";
			case VK_QUERY_TYPE_RANGE_SIZE : break;
			case VK_QUERY_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkQueryResultFlagBits (VkQueryResultFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_QUERY_RESULT_64_BIT : return "VK_QUERY_RESULT_64_BIT";
			case VK_QUERY_RESULT_WAIT_BIT : return "VK_QUERY_RESULT_WAIT_BIT";
			case VK_QUERY_RESULT_WITH_AVAILABILITY_BIT : return "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT";
			case VK_QUERY_RESULT_PARTIAL_BIT : return "VK_QUERY_RESULT_PARTIAL_BIT";
			case VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkMemoryHeapFlagBits (VkMemoryHeapFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_MEMORY_HEAP_DEVICE_LOCAL_BIT : return "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT";
			case VK_MEMORY_HEAP_MULTI_INSTANCE_BIT : return "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT";
			case VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageLayout (VkImageLayout value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_LAYOUT_UNDEFINED : return "VK_IMAGE_LAYOUT_UNDEFINED";
			case VK_IMAGE_LAYOUT_GENERAL : return "VK_IMAGE_LAYOUT_GENERAL";
			case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL : return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL";
			case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL : return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
			case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL : return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL";
			case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL : return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL";
			case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL : return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL";
			case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL : return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL";
			case VK_IMAGE_LAYOUT_PREINITIALIZED : return "VK_IMAGE_LAYOUT_PREINITIALIZED";
			case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL : return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL";
			case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL : return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL";
			case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR : return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR";
			case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR : return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR";
			case VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV : return "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV";
			case VK_IMAGE_LAYOUT_RANGE_SIZE : break;
			case VK_IMAGE_LAYOUT_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPipelineCreateFlagBits (VkPipelineCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT : return "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT";
			case VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT : return "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT";
			case VK_PIPELINE_CREATE_DERIVATIVE_BIT : return "VK_PIPELINE_CREATE_DERIVATIVE_BIT";
			case VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT : return "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT";
			case VK_PIPELINE_CREATE_DISPATCH_BASE : return "VK_PIPELINE_CREATE_DISPATCH_BASE";
			case VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NVX : return "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NVX";
			case VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageViewType (VkImageViewType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_VIEW_TYPE_1D : return "VK_IMAGE_VIEW_TYPE_1D";
			case VK_IMAGE_VIEW_TYPE_2D : return "VK_IMAGE_VIEW_TYPE_2D";
			case VK_IMAGE_VIEW_TYPE_3D : return "VK_IMAGE_VIEW_TYPE_3D";
			case VK_IMAGE_VIEW_TYPE_CUBE : return "VK_IMAGE_VIEW_TYPE_CUBE";
			case VK_IMAGE_VIEW_TYPE_1D_ARRAY : return "VK_IMAGE_VIEW_TYPE_1D_ARRAY";
			case VK_IMAGE_VIEW_TYPE_2D_ARRAY : return "VK_IMAGE_VIEW_TYPE_2D_ARRAY";
			case VK_IMAGE_VIEW_TYPE_CUBE_ARRAY : return "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY";
			case VK_IMAGE_VIEW_TYPE_RANGE_SIZE : break;
			case VK_IMAGE_VIEW_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkComponentSwizzle (VkComponentSwizzle value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMPONENT_SWIZZLE_IDENTITY : return "VK_COMPONENT_SWIZZLE_IDENTITY";
			case VK_COMPONENT_SWIZZLE_ZERO : return "VK_COMPONENT_SWIZZLE_ZERO";
			case VK_COMPONENT_SWIZZLE_ONE : return "VK_COMPONENT_SWIZZLE_ONE";
			case VK_COMPONENT_SWIZZLE_R : return "VK_COMPONENT_SWIZZLE_R";
			case VK_COMPONENT_SWIZZLE_G : return "VK_COMPONENT_SWIZZLE_G";
			case VK_COMPONENT_SWIZZLE_B : return "VK_COMPONENT_SWIZZLE_B";
			case VK_COMPONENT_SWIZZLE_A : return "VK_COMPONENT_SWIZZLE_A";
			case VK_COMPONENT_SWIZZLE_RANGE_SIZE : break;
			case VK_COMPONENT_SWIZZLE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPrimitiveTopology (VkPrimitiveTopology value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_PRIMITIVE_TOPOLOGY_POINT_LIST : return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST";
			case VK_PRIMITIVE_TOPOLOGY_LINE_LIST : return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST";
			case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP : return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP";
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST : return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP : return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN : return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN";
			case VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY : return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY";
			case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY : return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY";
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY : return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY";
			case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY : return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY";
			case VK_PRIMITIVE_TOPOLOGY_PATCH_LIST : return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
			case VK_PRIMITIVE_TOPOLOGY_RANGE_SIZE : break;
			case VK_PRIMITIVE_TOPOLOGY_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkVertexInputRate (VkVertexInputRate value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_VERTEX_INPUT_RATE_VERTEX : return "VK_VERTEX_INPUT_RATE_VERTEX";
			case VK_VERTEX_INPUT_RATE_INSTANCE : return "VK_VERTEX_INPUT_RATE_INSTANCE";
			case VK_VERTEX_INPUT_RATE_RANGE_SIZE : break;
			case VK_VERTEX_INPUT_RATE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPolygonMode (VkPolygonMode value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_POLYGON_MODE_FILL : return "VK_POLYGON_MODE_FILL";
			case VK_POLYGON_MODE_LINE : return "VK_POLYGON_MODE_LINE";
			case VK_POLYGON_MODE_POINT : return "VK_POLYGON_MODE_POINT";
			case VK_POLYGON_MODE_FILL_RECTANGLE_NV : return "VK_POLYGON_MODE_FILL_RECTANGLE_NV";
			case VK_POLYGON_MODE_RANGE_SIZE : break;
			case VK_POLYGON_MODE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSamplerYcbcrModelConversion (VkSamplerYcbcrModelConversion value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY : return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY";
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY : return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY";
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 : return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709";
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 : return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601";
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 : return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020";
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_RANGE_SIZE : break;
			case VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCompareOp (VkCompareOp value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMPARE_OP_NEVER : return "VK_COMPARE_OP_NEVER";
			case VK_COMPARE_OP_LESS : return "VK_COMPARE_OP_LESS";
			case VK_COMPARE_OP_EQUAL : return "VK_COMPARE_OP_EQUAL";
			case VK_COMPARE_OP_LESS_OR_EQUAL : return "VK_COMPARE_OP_LESS_OR_EQUAL";
			case VK_COMPARE_OP_GREATER : return "VK_COMPARE_OP_GREATER";
			case VK_COMPARE_OP_NOT_EQUAL : return "VK_COMPARE_OP_NOT_EQUAL";
			case VK_COMPARE_OP_GREATER_OR_EQUAL : return "VK_COMPARE_OP_GREATER_OR_EQUAL";
			case VK_COMPARE_OP_ALWAYS : return "VK_COMPARE_OP_ALWAYS";
			case VK_COMPARE_OP_RANGE_SIZE : break;
			case VK_COMPARE_OP_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkQueueGlobalPriorityEXT (VkQueueGlobalPriorityEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT : return "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT";
			case VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT : return "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT";
			case VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT : return "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT";
			case VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT : return "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT";
			case VK_QUEUE_GLOBAL_PRIORITY_RANGE_SIZE_EXT : break;
			case VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkStencilOp (VkStencilOp value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_STENCIL_OP_KEEP : return "VK_STENCIL_OP_KEEP";
			case VK_STENCIL_OP_ZERO : return "VK_STENCIL_OP_ZERO";
			case VK_STENCIL_OP_REPLACE : return "VK_STENCIL_OP_REPLACE";
			case VK_STENCIL_OP_INCREMENT_AND_CLAMP : return "VK_STENCIL_OP_INCREMENT_AND_CLAMP";
			case VK_STENCIL_OP_DECREMENT_AND_CLAMP : return "VK_STENCIL_OP_DECREMENT_AND_CLAMP";
			case VK_STENCIL_OP_INVERT : return "VK_STENCIL_OP_INVERT";
			case VK_STENCIL_OP_INCREMENT_AND_WRAP : return "VK_STENCIL_OP_INCREMENT_AND_WRAP";
			case VK_STENCIL_OP_DECREMENT_AND_WRAP : return "VK_STENCIL_OP_DECREMENT_AND_WRAP";
			case VK_STENCIL_OP_RANGE_SIZE : break;
			case VK_STENCIL_OP_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkLogicOp (VkLogicOp value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_LOGIC_OP_CLEAR : return "VK_LOGIC_OP_CLEAR";
			case VK_LOGIC_OP_AND : return "VK_LOGIC_OP_AND";
			case VK_LOGIC_OP_AND_REVERSE : return "VK_LOGIC_OP_AND_REVERSE";
			case VK_LOGIC_OP_COPY : return "VK_LOGIC_OP_COPY";
			case VK_LOGIC_OP_AND_INVERTED : return "VK_LOGIC_OP_AND_INVERTED";
			case VK_LOGIC_OP_NO_OP : return "VK_LOGIC_OP_NO_OP";
			case VK_LOGIC_OP_XOR : return "VK_LOGIC_OP_XOR";
			case VK_LOGIC_OP_OR : return "VK_LOGIC_OP_OR";
			case VK_LOGIC_OP_NOR : return "VK_LOGIC_OP_NOR";
			case VK_LOGIC_OP_EQUIVALENT : return "VK_LOGIC_OP_EQUIVALENT";
			case VK_LOGIC_OP_INVERT : return "VK_LOGIC_OP_INVERT";
			case VK_LOGIC_OP_OR_REVERSE : return "VK_LOGIC_OP_OR_REVERSE";
			case VK_LOGIC_OP_COPY_INVERTED : return "VK_LOGIC_OP_COPY_INVERTED";
			case VK_LOGIC_OP_OR_INVERTED : return "VK_LOGIC_OP_OR_INVERTED";
			case VK_LOGIC_OP_NAND : return "VK_LOGIC_OP_NAND";
			case VK_LOGIC_OP_SET : return "VK_LOGIC_OP_SET";
			case VK_LOGIC_OP_RANGE_SIZE : break;
			case VK_LOGIC_OP_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkMemoryPropertyFlagBits (VkMemoryPropertyFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT : return "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT";
			case VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT : return "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT";
			case VK_MEMORY_PROPERTY_HOST_COHERENT_BIT : return "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT";
			case VK_MEMORY_PROPERTY_HOST_CACHED_BIT : return "VK_MEMORY_PROPERTY_HOST_CACHED_BIT";
			case VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT : return "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT";
			case VK_MEMORY_PROPERTY_PROTECTED_BIT : return "VK_MEMORY_PROPERTY_PROTECTED_BIT";
			case VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkBlendFactor (VkBlendFactor value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_BLEND_FACTOR_ZERO : return "VK_BLEND_FACTOR_ZERO";
			case VK_BLEND_FACTOR_ONE : return "VK_BLEND_FACTOR_ONE";
			case VK_BLEND_FACTOR_SRC_COLOR : return "VK_BLEND_FACTOR_SRC_COLOR";
			case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR : return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
			case VK_BLEND_FACTOR_DST_COLOR : return "VK_BLEND_FACTOR_DST_COLOR";
			case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR : return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
			case VK_BLEND_FACTOR_SRC_ALPHA : return "VK_BLEND_FACTOR_SRC_ALPHA";
			case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA : return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
			case VK_BLEND_FACTOR_DST_ALPHA : return "VK_BLEND_FACTOR_DST_ALPHA";
			case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA : return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
			case VK_BLEND_FACTOR_CONSTANT_COLOR : return "VK_BLEND_FACTOR_CONSTANT_COLOR";
			case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR : return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR";
			case VK_BLEND_FACTOR_CONSTANT_ALPHA : return "VK_BLEND_FACTOR_CONSTANT_ALPHA";
			case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA : return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA";
			case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE : return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE";
			case VK_BLEND_FACTOR_SRC1_COLOR : return "VK_BLEND_FACTOR_SRC1_COLOR";
			case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR : return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR";
			case VK_BLEND_FACTOR_SRC1_ALPHA : return "VK_BLEND_FACTOR_SRC1_ALPHA";
			case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA : return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
			case VK_BLEND_FACTOR_RANGE_SIZE : break;
			case VK_BLEND_FACTOR_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDynamicState (VkDynamicState value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DYNAMIC_STATE_VIEWPORT : return "VK_DYNAMIC_STATE_VIEWPORT";
			case VK_DYNAMIC_STATE_SCISSOR : return "VK_DYNAMIC_STATE_SCISSOR";
			case VK_DYNAMIC_STATE_LINE_WIDTH : return "VK_DYNAMIC_STATE_LINE_WIDTH";
			case VK_DYNAMIC_STATE_DEPTH_BIAS : return "VK_DYNAMIC_STATE_DEPTH_BIAS";
			case VK_DYNAMIC_STATE_BLEND_CONSTANTS : return "VK_DYNAMIC_STATE_BLEND_CONSTANTS";
			case VK_DYNAMIC_STATE_DEPTH_BOUNDS : return "VK_DYNAMIC_STATE_DEPTH_BOUNDS";
			case VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK : return "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK";
			case VK_DYNAMIC_STATE_STENCIL_WRITE_MASK : return "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK";
			case VK_DYNAMIC_STATE_STENCIL_REFERENCE : return "VK_DYNAMIC_STATE_STENCIL_REFERENCE";
			case VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV : return "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV";
			case VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT : return "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT";
			case VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT : return "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT";
			case VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV : return "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV";
			case VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV : return "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV";
			case VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV : return "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV";
			case VK_DYNAMIC_STATE_RANGE_SIZE : break;
			case VK_DYNAMIC_STATE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkFilter (VkFilter value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_FILTER_NEAREST : return "VK_FILTER_NEAREST";
			case VK_FILTER_LINEAR : return "VK_FILTER_LINEAR";
			case VK_FILTER_CUBIC_IMG : return "VK_FILTER_CUBIC_IMG";
			case VK_FILTER_RANGE_SIZE : break;
			case VK_FILTER_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSamplerAddressMode (VkSamplerAddressMode value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SAMPLER_ADDRESS_MODE_REPEAT : return "VK_SAMPLER_ADDRESS_MODE_REPEAT";
			case VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT : return "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT";
			case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE : return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE";
			case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER : return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER";
			case VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE : return "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE";
			case VK_SAMPLER_ADDRESS_MODE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDependencyFlagBits (VkDependencyFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DEPENDENCY_BY_REGION_BIT : return "VK_DEPENDENCY_BY_REGION_BIT";
			case VK_DEPENDENCY_DEVICE_GROUP_BIT : return "VK_DEPENDENCY_DEVICE_GROUP_BIT";
			case VK_DEPENDENCY_VIEW_LOCAL_BIT : return "VK_DEPENDENCY_VIEW_LOCAL_BIT";
			case VK_DEPENDENCY_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSamplerMipmapMode (VkSamplerMipmapMode value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SAMPLER_MIPMAP_MODE_NEAREST : return "VK_SAMPLER_MIPMAP_MODE_NEAREST";
			case VK_SAMPLER_MIPMAP_MODE_LINEAR : return "VK_SAMPLER_MIPMAP_MODE_LINEAR";
			case VK_SAMPLER_MIPMAP_MODE_RANGE_SIZE : break;
			case VK_SAMPLER_MIPMAP_MODE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDescriptorSetLayoutCreateFlagBits (VkDescriptorSetLayoutCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR : return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR";
			case VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT : return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT";
			case VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSubpassContents (VkSubpassContents value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SUBPASS_CONTENTS_INLINE : return "VK_SUBPASS_CONTENTS_INLINE";
			case VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS : return "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS";
			case VK_SUBPASS_CONTENTS_RANGE_SIZE : break;
			case VK_SUBPASS_CONTENTS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkBorderColor (VkBorderColor value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK : return "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK";
			case VK_BORDER_COLOR_INT_TRANSPARENT_BLACK : return "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK";
			case VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK : return "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK";
			case VK_BORDER_COLOR_INT_OPAQUE_BLACK : return "VK_BORDER_COLOR_INT_OPAQUE_BLACK";
			case VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE : return "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE";
			case VK_BORDER_COLOR_INT_OPAQUE_WHITE : return "VK_BORDER_COLOR_INT_OPAQUE_WHITE";
			case VK_BORDER_COLOR_RANGE_SIZE : break;
			case VK_BORDER_COLOR_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkAttachmentLoadOp (VkAttachmentLoadOp value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_ATTACHMENT_LOAD_OP_LOAD : return "VK_ATTACHMENT_LOAD_OP_LOAD";
			case VK_ATTACHMENT_LOAD_OP_CLEAR : return "VK_ATTACHMENT_LOAD_OP_CLEAR";
			case VK_ATTACHMENT_LOAD_OP_DONT_CARE : return "VK_ATTACHMENT_LOAD_OP_DONT_CARE";
			case VK_ATTACHMENT_LOAD_OP_RANGE_SIZE : break;
			case VK_ATTACHMENT_LOAD_OP_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkFormatFeatureFlagBits (VkFormatFeatureFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT";
			case VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT : return "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT";
			case VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT : return "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT";
			case VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT : return "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT";
			case VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT : return "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT";
			case VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT : return "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT";
			case VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT : return "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT";
			case VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT : return "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT";
			case VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT : return "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT";
			case VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT : return "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT";
			case VK_FORMAT_FEATURE_BLIT_SRC_BIT : return "VK_FORMAT_FEATURE_BLIT_SRC_BIT";
			case VK_FORMAT_FEATURE_BLIT_DST_BIT : return "VK_FORMAT_FEATURE_BLIT_DST_BIT";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT";
			case VK_FORMAT_FEATURE_TRANSFER_SRC_BIT : return "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT";
			case VK_FORMAT_FEATURE_TRANSFER_DST_BIT : return "VK_FORMAT_FEATURE_TRANSFER_DST_BIT";
			case VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT : return "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT";
			case VK_FORMAT_FEATURE_DISJOINT_BIT : return "VK_FORMAT_FEATURE_DISJOINT_BIT";
			case VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT : return "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG";
			case VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT : return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT";
			case VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkAttachmentStoreOp (VkAttachmentStoreOp value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_ATTACHMENT_STORE_OP_STORE : return "VK_ATTACHMENT_STORE_OP_STORE";
			case VK_ATTACHMENT_STORE_OP_DONT_CARE : return "VK_ATTACHMENT_STORE_OP_DONT_CARE";
			case VK_ATTACHMENT_STORE_OP_RANGE_SIZE : break;
			case VK_ATTACHMENT_STORE_OP_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPipelineBindPoint (VkPipelineBindPoint value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_PIPELINE_BIND_POINT_GRAPHICS : return "VK_PIPELINE_BIND_POINT_GRAPHICS";
			case VK_PIPELINE_BIND_POINT_COMPUTE : return "VK_PIPELINE_BIND_POINT_COMPUTE";
			case VK_PIPELINE_BIND_POINT_RAYTRACING_NVX : return "VK_PIPELINE_BIND_POINT_RAYTRACING_NVX";
			case VK_PIPELINE_BIND_POINT_RANGE_SIZE : break;
			case VK_PIPELINE_BIND_POINT_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSampleCountFlagBits (VkSampleCountFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SAMPLE_COUNT_1_BIT : return "VK_SAMPLE_COUNT_1_BIT";
			case VK_SAMPLE_COUNT_2_BIT : return "VK_SAMPLE_COUNT_2_BIT";
			case VK_SAMPLE_COUNT_4_BIT : return "VK_SAMPLE_COUNT_4_BIT";
			case VK_SAMPLE_COUNT_8_BIT : return "VK_SAMPLE_COUNT_8_BIT";
			case VK_SAMPLE_COUNT_16_BIT : return "VK_SAMPLE_COUNT_16_BIT";
			case VK_SAMPLE_COUNT_32_BIT : return "VK_SAMPLE_COUNT_32_BIT";
			case VK_SAMPLE_COUNT_64_BIT : return "VK_SAMPLE_COUNT_64_BIT";
			case VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageUsageFlagBits (VkImageUsageFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_USAGE_TRANSFER_SRC_BIT : return "VK_IMAGE_USAGE_TRANSFER_SRC_BIT";
			case VK_IMAGE_USAGE_TRANSFER_DST_BIT : return "VK_IMAGE_USAGE_TRANSFER_DST_BIT";
			case VK_IMAGE_USAGE_SAMPLED_BIT : return "VK_IMAGE_USAGE_SAMPLED_BIT";
			case VK_IMAGE_USAGE_STORAGE_BIT : return "VK_IMAGE_USAGE_STORAGE_BIT";
			case VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT : return "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT";
			case VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT : return "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT";
			case VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT : return "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT";
			case VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT : return "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT";
			case VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV : return "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV";
			case VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkImageCreateFlagBits (VkImageCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_IMAGE_CREATE_SPARSE_BINDING_BIT : return "VK_IMAGE_CREATE_SPARSE_BINDING_BIT";
			case VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT : return "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT";
			case VK_IMAGE_CREATE_SPARSE_ALIASED_BIT : return "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT";
			case VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT : return "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT";
			case VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT : return "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT";
			case VK_IMAGE_CREATE_ALIAS_BIT : return "VK_IMAGE_CREATE_ALIAS_BIT";
			case VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT : return "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT";
			case VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT : return "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT";
			case VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT : return "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT";
			case VK_IMAGE_CREATE_EXTENDED_USAGE_BIT : return "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT";
			case VK_IMAGE_CREATE_PROTECTED_BIT : return "VK_IMAGE_CREATE_PROTECTED_BIT";
			case VK_IMAGE_CREATE_DISJOINT_BIT : return "VK_IMAGE_CREATE_DISJOINT_BIT";
			case VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV : return "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV";
			case VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT : return "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT";
			case VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSparseImageFormatFlagBits (VkSparseImageFormatFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT : return "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT";
			case VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT : return "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT";
			case VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT : return "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT";
			case VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSparseMemoryBindFlagBits (VkSparseMemoryBindFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SPARSE_MEMORY_BIND_METADATA_BIT : return "VK_SPARSE_MEMORY_BIND_METADATA_BIT";
			case VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkBufferCreateFlagBits (VkBufferCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_BUFFER_CREATE_SPARSE_BINDING_BIT : return "VK_BUFFER_CREATE_SPARSE_BINDING_BIT";
			case VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT : return "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT";
			case VK_BUFFER_CREATE_SPARSE_ALIASED_BIT : return "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT";
			case VK_BUFFER_CREATE_PROTECTED_BIT : return "VK_BUFFER_CREATE_PROTECTED_BIT";
			case VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkShaderStageFlagBits (VkShaderStageFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SHADER_STAGE_VERTEX_BIT : return "VK_SHADER_STAGE_VERTEX_BIT";
			case VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT : return "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT";
			case VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT : return "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT";
			case VK_SHADER_STAGE_GEOMETRY_BIT : return "VK_SHADER_STAGE_GEOMETRY_BIT";
			case VK_SHADER_STAGE_FRAGMENT_BIT : return "VK_SHADER_STAGE_FRAGMENT_BIT";
			case VK_SHADER_STAGE_COMPUTE_BIT : return "VK_SHADER_STAGE_COMPUTE_BIT";
			case VK_SHADER_STAGE_ALL_GRAPHICS : return "VK_SHADER_STAGE_ALL_GRAPHICS";
			case VK_SHADER_STAGE_ALL : return "VK_SHADER_STAGE_ALL";
			case VK_SHADER_STAGE_RAYGEN_BIT_NVX : return "VK_SHADER_STAGE_RAYGEN_BIT_NVX";
			case VK_SHADER_STAGE_ANY_HIT_BIT_NVX : return "VK_SHADER_STAGE_ANY_HIT_BIT_NVX";
			case VK_SHADER_STAGE_CLOSEST_HIT_BIT_NVX : return "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NVX";
			case VK_SHADER_STAGE_MISS_BIT_NVX : return "VK_SHADER_STAGE_MISS_BIT_NVX";
			case VK_SHADER_STAGE_INTERSECTION_BIT_NVX : return "VK_SHADER_STAGE_INTERSECTION_BIT_NVX";
			case VK_SHADER_STAGE_CALLABLE_BIT_NVX : return "VK_SHADER_STAGE_CALLABLE_BIT_NVX";
			case VK_SHADER_STAGE_TASK_BIT_NV : return "VK_SHADER_STAGE_TASK_BIT_NV";
			case VK_SHADER_STAGE_MESH_BIT_NV : return "VK_SHADER_STAGE_MESH_BIT_NV";
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCullModeFlagBits (VkCullModeFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_CULL_MODE_NONE : return "VK_CULL_MODE_NONE";
			case VK_CULL_MODE_FRONT_BIT : return "VK_CULL_MODE_FRONT_BIT";
			case VK_CULL_MODE_BACK_BIT : return "VK_CULL_MODE_BACK_BIT";
			case VK_CULL_MODE_FRONT_AND_BACK : return "VK_CULL_MODE_FRONT_AND_BACK";
			case VK_CULL_MODE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkColorComponentFlagBits (VkColorComponentFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COLOR_COMPONENT_R_BIT : return "VK_COLOR_COMPONENT_R_BIT";
			case VK_COLOR_COMPONENT_G_BIT : return "VK_COLOR_COMPONENT_G_BIT";
			case VK_COLOR_COMPONENT_B_BIT : return "VK_COLOR_COMPONENT_B_BIT";
			case VK_COLOR_COMPONENT_A_BIT : return "VK_COLOR_COMPONENT_A_BIT";
			case VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkAttachmentDescriptionFlagBits (VkAttachmentDescriptionFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT : return "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT";
			case VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSubpassDescriptionFlagBits (VkSubpassDescriptionFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX : return "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX";
			case VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX : return "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX";
			case VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCommandPoolCreateFlagBits (VkCommandPoolCreateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMMAND_POOL_CREATE_TRANSIENT_BIT : return "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT";
			case VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT : return "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT";
			case VK_COMMAND_POOL_CREATE_PROTECTED_BIT : return "VK_COMMAND_POOL_CREATE_PROTECTED_BIT";
			case VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCommandPoolResetFlagBits (VkCommandPoolResetFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT : return "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT";
			case VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDeviceGroupPresentModeFlagBitsKHR (VkDeviceGroupPresentModeFlagBitsKHR value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR : return "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR";
			case VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR : return "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR";
			case VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR : return "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR";
			case VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR : return "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR";
			case VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCommandBufferUsageFlagBits (VkCommandBufferUsageFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT : return "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT";
			case VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT : return "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT";
			case VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT : return "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT";
			case VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkQueryControlFlagBits (VkQueryControlFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_QUERY_CONTROL_PRECISE_BIT : return "VK_QUERY_CONTROL_PRECISE_BIT";
			case VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCommandBufferResetFlagBits (VkCommandBufferResetFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT : return "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT";
			case VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkStencilFaceFlagBits (VkStencilFaceFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_STENCIL_FACE_FRONT_BIT : return "VK_STENCIL_FACE_FRONT_BIT";
			case VK_STENCIL_FACE_BACK_BIT : return "VK_STENCIL_FACE_BACK_BIT";
			case VK_STENCIL_FRONT_AND_BACK : return "VK_STENCIL_FRONT_AND_BACK";
			case VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPointClippingBehavior (VkPointClippingBehavior value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES : return "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES";
			case VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY : return "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY";
			case VK_POINT_CLIPPING_BEHAVIOR_RANGE_SIZE : break;
			case VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkTessellationDomainOrigin (VkTessellationDomainOrigin value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT : return "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT";
			case VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT : return "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT";
			case VK_TESSELLATION_DOMAIN_ORIGIN_RANGE_SIZE : break;
			case VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSamplerYcbcrRange (VkSamplerYcbcrRange value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SAMPLER_YCBCR_RANGE_ITU_FULL : return "VK_SAMPLER_YCBCR_RANGE_ITU_FULL";
			case VK_SAMPLER_YCBCR_RANGE_ITU_NARROW : return "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW";
			case VK_SAMPLER_YCBCR_RANGE_RANGE_SIZE : break;
			case VK_SAMPLER_YCBCR_RANGE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDescriptorUpdateTemplateType (VkDescriptorUpdateTemplateType value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET : return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET";
			case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR : return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR";
			case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSubgroupFeatureFlagBits (VkSubgroupFeatureFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SUBGROUP_FEATURE_BASIC_BIT : return "VK_SUBGROUP_FEATURE_BASIC_BIT";
			case VK_SUBGROUP_FEATURE_VOTE_BIT : return "VK_SUBGROUP_FEATURE_VOTE_BIT";
			case VK_SUBGROUP_FEATURE_ARITHMETIC_BIT : return "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT";
			case VK_SUBGROUP_FEATURE_BALLOT_BIT : return "VK_SUBGROUP_FEATURE_BALLOT_BIT";
			case VK_SUBGROUP_FEATURE_SHUFFLE_BIT : return "VK_SUBGROUP_FEATURE_SHUFFLE_BIT";
			case VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT : return "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT";
			case VK_SUBGROUP_FEATURE_CLUSTERED_BIT : return "VK_SUBGROUP_FEATURE_CLUSTERED_BIT";
			case VK_SUBGROUP_FEATURE_QUAD_BIT : return "VK_SUBGROUP_FEATURE_QUAD_BIT";
			case VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV : return "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV";
			case VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkMemoryAllocateFlagBits (VkMemoryAllocateFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT : return "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT";
			case VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkExternalMemoryFeatureFlagBits (VkExternalMemoryFeatureFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT : return "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT";
			case VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT : return "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT";
			case VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT : return "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT";
			case VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkExternalMemoryHandleTypeFlagBits (VkExternalMemoryHandleTypeFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT : return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT";
			case VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkExternalFenceHandleTypeFlagBits (VkExternalFenceHandleTypeFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT : return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT";
			case VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT : return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT";
			case VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
			case VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT : return "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT";
			case VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkExternalFenceFeatureFlagBits (VkExternalFenceFeatureFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT : return "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT";
			case VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT : return "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT";
			case VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkFenceImportFlagBits (VkFenceImportFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_FENCE_IMPORT_TEMPORARY_BIT : return "VK_FENCE_IMPORT_TEMPORARY_BIT";
			case VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkExternalSemaphoreHandleTypeFlagBits (VkExternalSemaphoreHandleTypeFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT : return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT";
			case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT : return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT";
			case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
			case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT : return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT";
			case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT : return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT";
			case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkExternalSemaphoreFeatureFlagBits (VkExternalSemaphoreFeatureFlagBits value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT : return "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT";
			case VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT : return "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT";
			case VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkColorSpaceKHR (VkColorSpaceKHR value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COLOR_SPACE_SRGB_NONLINEAR_KHR : return "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR";
			case VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT : return "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT";
			case VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT : return "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT";
			case VK_COLOR_SPACE_DCI_P3_LINEAR_EXT : return "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT";
			case VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT : return "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT";
			case VK_COLOR_SPACE_BT709_LINEAR_EXT : return "VK_COLOR_SPACE_BT709_LINEAR_EXT";
			case VK_COLOR_SPACE_BT709_NONLINEAR_EXT : return "VK_COLOR_SPACE_BT709_NONLINEAR_EXT";
			case VK_COLOR_SPACE_BT2020_LINEAR_EXT : return "VK_COLOR_SPACE_BT2020_LINEAR_EXT";
			case VK_COLOR_SPACE_HDR10_ST2084_EXT : return "VK_COLOR_SPACE_HDR10_ST2084_EXT";
			case VK_COLOR_SPACE_DOLBYVISION_EXT : return "VK_COLOR_SPACE_DOLBYVISION_EXT";
			case VK_COLOR_SPACE_HDR10_HLG_EXT : return "VK_COLOR_SPACE_HDR10_HLG_EXT";
			case VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT : return "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT";
			case VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT : return "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT";
			case VK_COLOR_SPACE_PASS_THROUGH_EXT : return "VK_COLOR_SPACE_PASS_THROUGH_EXT";
			case VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT : return "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT";
			case VK_COLOR_SPACE_RANGE_SIZE_KHR : break;
			case VK_COLOR_SPACE_MAX_ENUM_KHR : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkAccelerationStructureTypeNVX (VkAccelerationStructureTypeNVX value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NVX : return "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NVX";
			case VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NVX : return "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NVX";
			case VK_ACCELERATION_STRUCTURE_TYPE_RANGE_SIZE_NVX : break;
			case VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NVX : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkPresentModeKHR (VkPresentModeKHR value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_PRESENT_MODE_IMMEDIATE_KHR : return "VK_PRESENT_MODE_IMMEDIATE_KHR";
			case VK_PRESENT_MODE_MAILBOX_KHR : return "VK_PRESENT_MODE_MAILBOX_KHR";
			case VK_PRESENT_MODE_FIFO_KHR : return "VK_PRESENT_MODE_FIFO_KHR";
			case VK_PRESENT_MODE_FIFO_RELAXED_KHR : return "VK_PRESENT_MODE_FIFO_RELAXED_KHR";
			case VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR : return "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR";
			case VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR : return "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR";
			case VK_PRESENT_MODE_RANGE_SIZE_KHR : break;
			case VK_PRESENT_MODE_MAX_ENUM_KHR : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSurfaceTransformFlagBitsKHR (VkSurfaceTransformFlagBitsKHR value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR : return "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR";
			case VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR : return "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR";
			case VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR : return "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR";
			case VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR : return "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR";
			case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR";
			case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR";
			case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR";
			case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR";
			case VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR : return "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR";
			case VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCompositeAlphaFlagBitsKHR (VkCompositeAlphaFlagBitsKHR value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR : return "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR";
			case VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR : return "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR";
			case VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR : return "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR";
			case VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR : return "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR";
			case VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkBlendOverlapEXT (VkBlendOverlapEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_BLEND_OVERLAP_UNCORRELATED_EXT : return "VK_BLEND_OVERLAP_UNCORRELATED_EXT";
			case VK_BLEND_OVERLAP_DISJOINT_EXT : return "VK_BLEND_OVERLAP_DISJOINT_EXT";
			case VK_BLEND_OVERLAP_CONJOINT_EXT : return "VK_BLEND_OVERLAP_CONJOINT_EXT";
			case VK_BLEND_OVERLAP_RANGE_SIZE_EXT : break;
			case VK_BLEND_OVERLAP_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDisplayPlaneAlphaFlagBitsKHR (VkDisplayPlaneAlphaFlagBitsKHR value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR : return "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR";
			case VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR : return "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR";
			case VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR : return "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR";
			case VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR : return "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR";
			case VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDebugReportObjectTypeEXT (VkDebugReportObjectTypeEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NVX_EXT : return "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NVX_EXT";
			case VK_DEBUG_REPORT_OBJECT_TYPE_RANGE_SIZE_EXT : break;
			case VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkRasterizationOrderAMD (VkRasterizationOrderAMD value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_RASTERIZATION_ORDER_STRICT_AMD : return "VK_RASTERIZATION_ORDER_STRICT_AMD";
			case VK_RASTERIZATION_ORDER_RELAXED_AMD : return "VK_RASTERIZATION_ORDER_RELAXED_AMD";
			case VK_RASTERIZATION_ORDER_RANGE_SIZE_AMD : break;
			case VK_RASTERIZATION_ORDER_MAX_ENUM_AMD : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkValidationCheckEXT (VkValidationCheckEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_VALIDATION_CHECK_ALL_EXT : return "VK_VALIDATION_CHECK_ALL_EXT";
			case VK_VALIDATION_CHECK_SHADERS_EXT : return "VK_VALIDATION_CHECK_SHADERS_EXT";
			case VK_VALIDATION_CHECK_RANGE_SIZE_EXT : break;
			case VK_VALIDATION_CHECK_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkIndirectCommandsTokenTypeNVX (VkIndirectCommandsTokenTypeNVX value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX : return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX";
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_RANGE_SIZE_NVX : break;
			case VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NVX : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkObjectEntryTypeNVX (VkObjectEntryTypeNVX value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX : return "VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX";
			case VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX : return "VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX";
			case VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX : return "VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX";
			case VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX : return "VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX";
			case VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX : return "VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX";
			case VK_OBJECT_ENTRY_TYPE_RANGE_SIZE_NVX : break;
			case VK_OBJECT_ENTRY_TYPE_MAX_ENUM_NVX : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDisplayPowerStateEXT (VkDisplayPowerStateEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DISPLAY_POWER_STATE_OFF_EXT : return "VK_DISPLAY_POWER_STATE_OFF_EXT";
			case VK_DISPLAY_POWER_STATE_SUSPEND_EXT : return "VK_DISPLAY_POWER_STATE_SUSPEND_EXT";
			case VK_DISPLAY_POWER_STATE_ON_EXT : return "VK_DISPLAY_POWER_STATE_ON_EXT";
			case VK_DISPLAY_POWER_STATE_RANGE_SIZE_EXT : break;
			case VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDeviceEventTypeEXT (VkDeviceEventTypeEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT : return "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT";
			case VK_DEVICE_EVENT_TYPE_RANGE_SIZE_EXT : break;
			case VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDisplayEventTypeEXT (VkDisplayEventTypeEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT : return "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT";
			case VK_DISPLAY_EVENT_TYPE_RANGE_SIZE_EXT : break;
			case VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkViewportCoordinateSwizzleNV (VkViewportCoordinateSwizzleNV value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV : return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV";
			case VK_VIEWPORT_COORDINATE_SWIZZLE_RANGE_SIZE_NV : break;
			case VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDiscardRectangleModeEXT (VkDiscardRectangleModeEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT : return "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT";
			case VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT : return "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT";
			case VK_DISCARD_RECTANGLE_MODE_RANGE_SIZE_EXT : break;
			case VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkConservativeRasterizationModeEXT (VkConservativeRasterizationModeEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT : return "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT";
			case VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT : return "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT";
			case VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT : return "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT";
			case VK_CONSERVATIVE_RASTERIZATION_MODE_RANGE_SIZE_EXT : break;
			case VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkSamplerReductionModeEXT (VkSamplerReductionModeEXT value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT : return "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT";
			case VK_SAMPLER_REDUCTION_MODE_MIN_EXT : return "VK_SAMPLER_REDUCTION_MODE_MIN_EXT";
			case VK_SAMPLER_REDUCTION_MODE_MAX_EXT : return "VK_SAMPLER_REDUCTION_MODE_MAX_EXT";
			case VK_SAMPLER_REDUCTION_MODE_RANGE_SIZE_EXT : break;
			case VK_SAMPLER_REDUCTION_MODE_MAX_ENUM_EXT : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCoverageModulationModeNV (VkCoverageModulationModeNV value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COVERAGE_MODULATION_MODE_NONE_NV : return "VK_COVERAGE_MODULATION_MODE_NONE_NV";
			case VK_COVERAGE_MODULATION_MODE_RGB_NV : return "VK_COVERAGE_MODULATION_MODE_RGB_NV";
			case VK_COVERAGE_MODULATION_MODE_ALPHA_NV : return "VK_COVERAGE_MODULATION_MODE_ALPHA_NV";
			case VK_COVERAGE_MODULATION_MODE_RGBA_NV : return "VK_COVERAGE_MODULATION_MODE_RGBA_NV";
			case VK_COVERAGE_MODULATION_MODE_RANGE_SIZE_NV : break;
			case VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkShadingRatePaletteEntryNV (VkShadingRatePaletteEntryNV value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV : return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV";
			case VK_SHADING_RATE_PALETTE_ENTRY_RANGE_SIZE_NV : break;
			case VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkCoarseSampleOrderTypeNV (VkCoarseSampleOrderTypeNV value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV : return "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV";
			case VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV : return "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV";
			case VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV : return "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV";
			case VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV : return "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV";
			case VK_COARSE_SAMPLE_ORDER_TYPE_RANGE_SIZE_NV : break;
			case VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkGeometryTypeNVX (VkGeometryTypeNVX value)
	{
		ENABLE_ENUM_CHECKS();
		switch ( value )
		{
			case VK_GEOMETRY_TYPE_TRIANGLES_NVX : return "VK_GEOMETRY_TYPE_TRIANGLES_NVX";
			case VK_GEOMETRY_TYPE_AABBS_NVX : return "VK_GEOMETRY_TYPE_AABBS_NVX";
			case VK_GEOMETRY_TYPE_RANGE_SIZE_NVX : break;
			case VK_GEOMETRY_TYPE_MAX_ENUM_NVX : break;
		}
		DISABLE_ENUM_CHECKS();
		RETURN_ERR( "unsupported value: "s << EnumToString( value ), "<unknown>" );
	}

	ND_ String  Serialize_VkDisplayPlaneAlphaFlagsKHR (VkDisplayPlaneAlphaFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkQueueFlags (VkQueueFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkQueueFlags t = 1; t < VK_QUEUE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkQueueFlagBits( VkQueueFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkCommandPoolTrimFlags (VkCommandPoolTrimFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkBufferViewCreateFlags (VkBufferViewCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkDebugUtilsMessengerCallbackDataFlagsEXT (VkDebugUtilsMessengerCallbackDataFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkFormatFeatureFlags (VkFormatFeatureFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkFormatFeatureFlags t = 1; t < VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkFormatFeatureFlagBits( VkFormatFeatureFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkImageUsageFlags (VkImageUsageFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkImageUsageFlags t = 1; t < VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkImageUsageFlagBits( VkImageUsageFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkQueryResultFlags (VkQueryResultFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkQueryResultFlags t = 1; t < VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkQueryResultFlagBits( VkQueryResultFlagBits(t) );
		}
		return result;
	}

#ifdef VULKAN_WIN32_H_
	ND_ String  Serialize_VkWin32SurfaceCreateFlagsKHR (VkWin32SurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}
#endif

	ND_ String  Serialize_VkMemoryHeapFlags (VkMemoryHeapFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkMemoryHeapFlags t = 1; t < VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkMemoryHeapFlagBits( VkMemoryHeapFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkSubgroupFeatureFlags (VkSubgroupFeatureFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkSubgroupFeatureFlags t = 1; t < VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkSubgroupFeatureFlagBits( VkSubgroupFeatureFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkShaderModuleCreateFlags (VkShaderModuleCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

#ifdef VULKAN_XLIB_H_
	ND_ String  Serialize_VkXlibSurfaceCreateFlagsKHR (VkXlibSurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}
#endif

	ND_ String  Serialize_VkSampleCountFlags (VkSampleCountFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkSampleCountFlags t = 1; t < VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkSampleCountFlagBits( VkSampleCountFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkImageCreateFlags (VkImageCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkImageCreateFlags t = 1; t < VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkImageCreateFlagBits( VkImageCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkSemaphoreCreateFlags (VkSemaphoreCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkMemoryPropertyFlags (VkMemoryPropertyFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkMemoryPropertyFlags t = 1; t < VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkMemoryPropertyFlagBits( VkMemoryPropertyFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkDeviceQueueCreateFlags (VkDeviceQueueCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkDeviceQueueCreateFlags t = 1; t < VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkDeviceQueueCreateFlagBits( VkDeviceQueueCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkQueryPipelineStatisticFlags (VkQueryPipelineStatisticFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkQueryPipelineStatisticFlags t = 1; t < VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkQueryPipelineStatisticFlagBits( VkQueryPipelineStatisticFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineStageFlags (VkPipelineStageFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkPipelineStageFlags t = 1; t < VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkPipelineStageFlagBits( VkPipelineStageFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkMemoryMapFlags (VkMemoryMapFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkBufferUsageFlags (VkBufferUsageFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkBufferUsageFlags t = 1; t < VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkBufferUsageFlagBits( VkBufferUsageFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkImageAspectFlags (VkImageAspectFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkImageAspectFlags t = 1; t < VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkImageAspectFlagBits( VkImageAspectFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineDepthStencilStateCreateFlags (VkPipelineDepthStencilStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkSparseImageFormatFlags (VkSparseImageFormatFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkSparseImageFormatFlags t = 1; t < VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkSparseImageFormatFlagBits( VkSparseImageFormatFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkSamplerCreateFlags (VkSamplerCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkSparseMemoryBindFlags (VkSparseMemoryBindFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkSparseMemoryBindFlags t = 1; t < VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkSparseMemoryBindFlagBits( VkSparseMemoryBindFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkFenceCreateFlags (VkFenceCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkFenceCreateFlags t = 1; t < VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkFenceCreateFlagBits( VkFenceCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkSurfaceTransformFlagsKHR (VkSurfaceTransformFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkEventCreateFlags (VkEventCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkQueryPoolCreateFlags (VkQueryPoolCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkBufferCreateFlags (VkBufferCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkBufferCreateFlags t = 1; t < VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkBufferCreateFlagBits( VkBufferCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkImageViewCreateFlags (VkImageViewCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineCacheCreateFlags (VkPipelineCacheCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineCreateFlags (VkPipelineCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkPipelineCreateFlags t = 1; t < VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkPipelineCreateFlagBits( VkPipelineCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkDescriptorPoolCreateFlags (VkDescriptorPoolCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkDescriptorPoolCreateFlags t = 1; t < VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkDescriptorPoolCreateFlagBits( VkDescriptorPoolCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineShaderStageCreateFlags (VkPipelineShaderStageCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineViewportStateCreateFlags (VkPipelineViewportStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineVertexInputStateCreateFlags (VkPipelineVertexInputStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineInputAssemblyStateCreateFlags (VkPipelineInputAssemblyStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkMemoryAllocateFlags (VkMemoryAllocateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkMemoryAllocateFlags t = 1; t < VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkMemoryAllocateFlagBits( VkMemoryAllocateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineTessellationStateCreateFlags (VkPipelineTessellationStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkExternalFenceFeatureFlags (VkExternalFenceFeatureFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkExternalFenceFeatureFlags t = 1; t < VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkExternalFenceFeatureFlagBits( VkExternalFenceFeatureFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineRasterizationStateCreateFlags (VkPipelineRasterizationStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkCullModeFlags (VkCullModeFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkCullModeFlags t = 1; t < VK_CULL_MODE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkCullModeFlagBits( VkCullModeFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineMultisampleStateCreateFlags (VkPipelineMultisampleStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkStencilFaceFlags (VkStencilFaceFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkStencilFaceFlags t = 1; t < VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkStencilFaceFlagBits( VkStencilFaceFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineColorBlendStateCreateFlags (VkPipelineColorBlendStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkDescriptorPoolResetFlags (VkDescriptorPoolResetFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkColorComponentFlags (VkColorComponentFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkColorComponentFlags t = 1; t < VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkColorComponentFlagBits( VkColorComponentFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineDynamicStateCreateFlags (VkPipelineDynamicStateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineLayoutCreateFlags (VkPipelineLayoutCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkShaderStageFlags (VkShaderStageFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkShaderStageFlags t = 1; t < VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkShaderStageFlagBits( VkShaderStageFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkDependencyFlags (VkDependencyFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkDependencyFlags t = 1; t < VK_DEPENDENCY_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkDependencyFlagBits( VkDependencyFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkDescriptorSetLayoutCreateFlags (VkDescriptorSetLayoutCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkDescriptorSetLayoutCreateFlags t = 1; t < VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkDescriptorSetLayoutCreateFlagBits( VkDescriptorSetLayoutCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkFramebufferCreateFlags (VkFramebufferCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkRenderPassCreateFlags (VkRenderPassCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkAttachmentDescriptionFlags (VkAttachmentDescriptionFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkAttachmentDescriptionFlags t = 1; t < VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkAttachmentDescriptionFlagBits( VkAttachmentDescriptionFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkSubpassDescriptionFlags (VkSubpassDescriptionFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkSubpassDescriptionFlags t = 1; t < VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkSubpassDescriptionFlagBits( VkSubpassDescriptionFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkAccessFlags (VkAccessFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkAccessFlags t = 1; t < VK_ACCESS_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkAccessFlagBits( VkAccessFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkCommandPoolCreateFlags (VkCommandPoolCreateFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkCommandPoolCreateFlags t = 1; t < VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkCommandPoolCreateFlagBits( VkCommandPoolCreateFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkCommandPoolResetFlags (VkCommandPoolResetFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkCommandPoolResetFlags t = 1; t < VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkCommandPoolResetFlagBits( VkCommandPoolResetFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkCommandBufferUsageFlags (VkCommandBufferUsageFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkCommandBufferUsageFlags t = 1; t < VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkCommandBufferUsageFlagBits( VkCommandBufferUsageFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkQueryControlFlags (VkQueryControlFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkQueryControlFlags t = 1; t < VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkQueryControlFlagBits( VkQueryControlFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkCommandBufferResetFlags (VkCommandBufferResetFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkCommandBufferResetFlags t = 1; t < VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkCommandBufferResetFlagBits( VkCommandBufferResetFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkDescriptorUpdateTemplateCreateFlags (VkDescriptorUpdateTemplateCreateFlags bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkExternalMemoryHandleTypeFlags (VkExternalMemoryHandleTypeFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkExternalMemoryHandleTypeFlags t = 1; t < VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkExternalMemoryHandleTypeFlagBits( VkExternalMemoryHandleTypeFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkExternalMemoryFeatureFlags (VkExternalMemoryFeatureFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkExternalMemoryFeatureFlags t = 1; t < VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkExternalMemoryFeatureFlagBits( VkExternalMemoryFeatureFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkExternalFenceHandleTypeFlags (VkExternalFenceHandleTypeFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkExternalFenceHandleTypeFlags t = 1; t < VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkExternalFenceHandleTypeFlagBits( VkExternalFenceHandleTypeFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkFenceImportFlags (VkFenceImportFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkFenceImportFlags t = 1; t < VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkFenceImportFlagBits( VkFenceImportFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkPipelineCoverageModulationStateCreateFlagsNV (VkPipelineCoverageModulationStateCreateFlagsNV bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkSemaphoreImportFlags (VkSemaphoreImportFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkSemaphoreImportFlags t = 1; t < VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkSemaphoreImportFlagBits( VkSemaphoreImportFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkExternalSemaphoreHandleTypeFlags (VkExternalSemaphoreHandleTypeFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkExternalSemaphoreHandleTypeFlags t = 1; t < VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkExternalSemaphoreHandleTypeFlagBits( VkExternalSemaphoreHandleTypeFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkExternalSemaphoreFeatureFlags (VkExternalSemaphoreFeatureFlags bits)
	{
		if ( bits == 0 )
			return "0";
		String  result;
		for (VkExternalSemaphoreFeatureFlags t = 1; t < VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM; t <<= 1)
		{
			if ( not EnumEq( bits, t ) )
				continue;

			if ( not result.empty() )
				result << " | ";

			result << Serialize_VkExternalSemaphoreFeatureFlagBits( VkExternalSemaphoreFeatureFlagBits(t) );
		}
		return result;
	}

	ND_ String  Serialize_VkCompositeAlphaFlagsKHR (VkCompositeAlphaFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkSwapchainCreateFlagsKHR (VkSwapchainCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkDeviceGroupPresentModeFlagsKHR (VkDeviceGroupPresentModeFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkDisplayModeCreateFlagsKHR (VkDisplayModeCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkDisplaySurfaceCreateFlagsKHR (VkDisplaySurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkExternalMemoryHandleTypeFlagsNV (VkExternalMemoryHandleTypeFlagsNV bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkConditionalRenderingFlagsEXT (VkConditionalRenderingFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineCoverageToColorStateCreateFlagsNV (VkPipelineCoverageToColorStateCreateFlagsNV bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkIndirectCommandsLayoutUsageFlagsNVX (VkIndirectCommandsLayoutUsageFlagsNVX bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkObjectEntryUsageFlagsNVX (VkObjectEntryUsageFlagsNVX bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkSurfaceCounterFlagsEXT (VkSurfaceCounterFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineViewportSwizzleStateCreateFlagsNV (VkPipelineViewportSwizzleStateCreateFlagsNV bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineDiscardRectangleStateCreateFlagsEXT (VkPipelineDiscardRectangleStateCreateFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkPipelineRasterizationConservativeStateCreateFlagsEXT (VkPipelineRasterizationConservativeStateCreateFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkValidationCacheCreateFlagsEXT (VkValidationCacheCreateFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkDescriptorBindingFlagsEXT (VkDescriptorBindingFlagsEXT bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkGeometryFlagsNVX (VkGeometryFlagsNVX bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

	ND_ String  Serialize_VkBuildAccelerationStructureFlagsNVX (VkBuildAccelerationStructureFlagsNVX bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}

#ifdef VULKAN_ANDROID_H_
	ND_ String  Serialize_VkAndroidSurfaceCreateFlagsKHR (VkAndroidSurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}
#endif

#ifdef VULKAN_XCB_H_
	ND_ String  Serialize_VkXcbSurfaceCreateFlagsKHR (VkXcbSurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}
#endif

#ifdef VULKAN_MIR_H_
	ND_ String  Serialize_VkMirSurfaceCreateFlagsKHR (VkMirSurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}
#endif

#ifdef VULKAN_WAYLAND_H_
	ND_ String  Serialize_VkWaylandSurfaceCreateFlagsKHR (VkWaylandSurfaceCreateFlagsKHR bits)
	{
		ASSERT( bits == 0 );
		return "0";
	}
#endif

